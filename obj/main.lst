                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init_cards
                             13 	.globl _update_selected_card
                             14 	.globl _draw_cards
                             15 	.globl _check_keyboard
                             16 	.globl _initCPC
                             17 	.globl _myInterruptHandler
                             18 	.globl _drawText
                             19 	.globl _drawTextM1
                             20 	.globl _sprintf
                             21 	.globl _cpct_getRandom_mxor_u8
                             22 	.globl _cpct_setCRTCReg
                             23 	.globl _cpct_getScreenPtr
                             24 	.globl _cpct_setVideoMemoryPage
                             25 	.globl _cpct_setPALColour
                             26 	.globl _cpct_setPalette
                             27 	.globl _cpct_waitVSYNC
                             28 	.globl _cpct_setVideoMode
                             29 	.globl _cpct_drawSprite
                             30 	.globl _cpct_drawSolidBox
                             31 	.globl _cpct_isKeyPressed
                             32 	.globl _cpct_scanKeyboard
                             33 	.globl _cpct_waitHalts
                             34 	.globl _cpct_setStackLocation
                             35 	.globl _cpct_memset
                             36 	.globl _cpct_setInterruptHandler
                             37 	.globl _cpct_disableFirmware
                             38 	.globl _moved
                             39 	.globl _num_cards
                             40 	.globl _cards
                             41 	.globl _previous_card
                             42 	.globl _selected_card
                             43 	.globl _aux_txt
                             44 	.globl _pvmem
                             45 	.globl _i_time
                             46 	.globl _card_description
                             47 	.globl _card_sprite
                             48 	.globl _card_types
                             49 ;--------------------------------------------------------
                             50 ; special function registers
                             51 ;--------------------------------------------------------
                             52 ;--------------------------------------------------------
                             53 ; ram data
                             54 ;--------------------------------------------------------
                             55 	.area _DATA
   0000                      56 _i_time::
   0000                      57 	.ds 4
   0004                      58 _pvmem::
   0004                      59 	.ds 2
   0006                      60 _aux_txt::
   0006                      61 	.ds 50
   0038                      62 _selected_card::
   0038                      63 	.ds 1
   0039                      64 _previous_card::
   0039                      65 	.ds 1
   003A                      66 _cards::
   003A                      67 	.ds 20
   004E                      68 _num_cards::
   004E                      69 	.ds 1
   004F                      70 _moved::
   004F                      71 	.ds 1
   0050                      72 _myInterruptHandler_g_nInterrupt_1_125:
   0050                      73 	.ds 1
                             74 ;--------------------------------------------------------
                             75 ; ram data
                             76 ;--------------------------------------------------------
                             77 	.area _INITIALIZED
                             78 ;--------------------------------------------------------
                             79 ; absolute external ram data
                             80 ;--------------------------------------------------------
                             81 	.area _DABS (ABS)
                             82 ;--------------------------------------------------------
                             83 ; global & static initialisations
                             84 ;--------------------------------------------------------
                             85 	.area _HOME
                             86 	.area _GSINIT
                             87 	.area _GSFINAL
                             88 	.area _GSINIT
                             89 ;src/main.c:61: static u8 g_nInterrupt = 0; // Manage Interrupt
   0000 FD 21r50r00   [14]   90 	ld	iy, #_myInterruptHandler_g_nInterrupt_1_125
   0004 FD 36 00 00   [19]   91 	ld	0 (iy), #0x00
                             92 ;--------------------------------------------------------
                             93 ; Home
                             94 ;--------------------------------------------------------
                             95 	.area _HOME
                             96 	.area _HOME
                             97 ;--------------------------------------------------------
                             98 ; code
                             99 ;--------------------------------------------------------
                            100 	.area _CODE
                            101 ;src/main.c:60: void myInterruptHandler(){
                            102 ;	---------------------------------
                            103 ; Function myInterruptHandler
                            104 ; ---------------------------------
   0000                     105 _myInterruptHandler::
                            106 ;src/main.c:63: i_time++;
   0000 FD 21r00r00   [14]  107 	ld	iy, #_i_time
   0004 FD 34 00      [23]  108 	inc	0 (iy)
   0007 20 0D         [12]  109 	jr	NZ,00130$
   0009 FD 34 01      [23]  110 	inc	1 (iy)
   000C 20 08         [12]  111 	jr	NZ,00130$
   000E FD 34 02      [23]  112 	inc	2 (iy)
   0011 20 03         [12]  113 	jr	NZ,00130$
   0013 FD 34 03      [23]  114 	inc	3 (iy)
   0016                     115 00130$:
                            116 ;src/main.c:64: g_nInterrupt++;
   0016 FD 21r50r00   [14]  117 	ld	iy, #_myInterruptHandler_g_nInterrupt_1_125
   001A FD 34 00      [23]  118 	inc	0 (iy)
                            119 ;src/main.c:65: switch (g_nInterrupt){
   001D FD 7E 00      [19]  120 	ld	a, 0 (iy)
   0020 3D            [ 4]  121 	dec	a
   0021 28 1E         [12]  122 	jr	Z,00101$
   0023 FD 7E 00      [19]  123 	ld	a, 0 (iy)
   0026 D6 02         [ 7]  124 	sub	a, #0x02
   0028 28 1F         [12]  125 	jr	Z,00102$
   002A FD 7E 00      [19]  126 	ld	a, 0 (iy)
   002D D6 03         [ 7]  127 	sub	a, #0x03
   002F 28 30         [12]  128 	jr	Z,00103$
   0031 FD 7E 00      [19]  129 	ld	a, 0 (iy)
   0034 D6 04         [ 7]  130 	sub	a, #0x04
   0036 28 31         [12]  131 	jr	Z,00104$
   0038 FD 7E 00      [19]  132 	ld	a, 0 (iy)
   003B D6 05         [ 7]  133 	sub	a, #0x05
   003D 28 32         [12]  134 	jr	Z,00105$
   003F 18 3F         [12]  135 	jr	00106$
                            136 ;src/main.c:66: case 1:
   0041                     137 00101$:
                            138 ;src/main.c:67: cpct_setBorder(HW_LIME);
   0041 21 10 1A      [10]  139 	ld	hl, #0x1a10
   0044 E5            [11]  140 	push	hl
   0045 CDr00r00      [17]  141 	call	_cpct_setPALColour
                            142 ;src/main.c:68: break;
   0048 C9            [10]  143 	ret
                            144 ;src/main.c:69: case 2:
   0049                     145 00102$:
                            146 ;src/main.c:74: cpct_setBorder(HW_CYAN);
   0049 21 10 06      [10]  147 	ld	hl, #0x0610
   004C E5            [11]  148 	push	hl
   004D CDr00r00      [17]  149 	call	_cpct_setPALColour
                            150 ;src/main.c:75: cpct_setVideoMode(0);
   0050 2E 00         [ 7]  151 	ld	l, #0x00
   0052 CDr00r00      [17]  152 	call	_cpct_setVideoMode
                            153 ;src/main.c:76: cpct_setPalette(g_palette0, 16);
   0055 21 10 00      [10]  154 	ld	hl, #0x0010
   0058 E5            [11]  155 	push	hl
   0059 21r00r00      [10]  156 	ld	hl, #_g_palette0
   005C E5            [11]  157 	push	hl
   005D CDr00r00      [17]  158 	call	_cpct_setPalette
                            159 ;src/main.c:77: break;
   0060 C9            [10]  160 	ret
                            161 ;src/main.c:78: case 3:
   0061                     162 00103$:
                            163 ;src/main.c:79: cpct_setBorder(HW_RED);
   0061 21 10 1C      [10]  164 	ld	hl, #0x1c10
   0064 E5            [11]  165 	push	hl
   0065 CDr00r00      [17]  166 	call	_cpct_setPALColour
                            167 ;src/main.c:80: break;
   0068 C9            [10]  168 	ret
                            169 ;src/main.c:81: case 4:
   0069                     170 00104$:
                            171 ;src/main.c:82: cpct_setBorder(HW_YELLOW);
   0069 21 10 1E      [10]  172 	ld	hl, #0x1e10
   006C E5            [11]  173 	push	hl
   006D CDr00r00      [17]  174 	call	_cpct_setPALColour
                            175 ;src/main.c:83: break;
   0070 C9            [10]  176 	ret
                            177 ;src/main.c:84: case 5:
   0071                     178 00105$:
                            179 ;src/main.c:85: cpct_setBorder(HW_BLACK);
   0071 21 10 14      [10]  180 	ld	hl, #0x1410
   0074 E5            [11]  181 	push	hl
   0075 CDr00r00      [17]  182 	call	_cpct_setPALColour
                            183 ;src/main.c:91: cpct_setBorder(HW_MAGENTA);
   0078 21 10 18      [10]  184 	ld	hl, #0x1810
   007B E5            [11]  185 	push	hl
   007C CDr00r00      [17]  186 	call	_cpct_setPALColour
                            187 ;src/main.c:92: break;
   007F C9            [10]  188 	ret
                            189 ;src/main.c:93: default:
   0080                     190 00106$:
                            191 ;src/main.c:94: cpct_setBorder(HW_BRIGHT_BLUE);
   0080 21 10 15      [10]  192 	ld	hl, #0x1510
   0083 E5            [11]  193 	push	hl
   0084 CDr00r00      [17]  194 	call	_cpct_setPALColour
                            195 ;src/main.c:95: cpct_setVideoMode(1);
   0087 2E 01         [ 7]  196 	ld	l, #0x01
   0089 CDr00r00      [17]  197 	call	_cpct_setVideoMode
                            198 ;src/main.c:96: cpct_setPalette(g_palette1, 4);
   008C 21 04 00      [10]  199 	ld	hl, #0x0004
   008F E5            [11]  200 	push	hl
   0090 21r00r00      [10]  201 	ld	hl, #_g_palette1
   0093 E5            [11]  202 	push	hl
   0094 CDr00r00      [17]  203 	call	_cpct_setPalette
                            204 ;src/main.c:97: cpct_scanKeyboard();
   0097 CDr00r00      [17]  205 	call	_cpct_scanKeyboard
                            206 ;src/main.c:98: g_nInterrupt = 0;
   009A 21r50r00      [10]  207 	ld	hl,#_myInterruptHandler_g_nInterrupt_1_125 + 0
   009D 36 00         [10]  208 	ld	(hl), #0x00
                            209 ;src/main.c:100: }
   009F C9            [10]  210 	ret
   00A0                     211 _card_types:
   00A0 02                  212 	.db #0x02	; 2
   00A1r00r00               213 	.dw _s_cards_0
   00A3 53 57 4F 52 44 3A   214 	.ascii "SWORD:PRODUCES DIRECT DAMAGE TO THE ENEMY"
        50 52 4F 44 55 43
        45 53 20 44 49 52
        45 43 54 20 44 41
        4D 41 47 45 20 54
        4F 20 54 48 45 20
        45 4E 45 4D 59
   00CC 00                  215 	.db 0x00
   00CD 00                  216 	.db 0x00
   00CE 00                  217 	.db 0x00
   00CF 00                  218 	.db 0x00
   00D0 00                  219 	.db 0x00
   00D1 00                  220 	.db 0x00
   00D2 00                  221 	.db 0x00
   00D3 00                  222 	.db 0x00
   00D4 00                  223 	.db 0x00
   00D5 01                  224 	.db #0x01	; 1
   00D6r00r00               225 	.dw _s_cards_1
   00D8 53 48 49 45 4C 44   226 	.ascii "SHIELD:PROTECTS SOME DAMAGE"
        3A 50 52 4F 54 45
        43 54 53 20 53 4F
        4D 45 20 44 41 4D
        41 47 45
   00F3 00                  227 	.db 0x00
   00F4 00                  228 	.db 0x00
   00F5 00                  229 	.db 0x00
   00F6 00                  230 	.db 0x00
   00F7 00                  231 	.db 0x00
   00F8 00                  232 	.db 0x00
   00F9 00                  233 	.db 0x00
   00FA 00                  234 	.db 0x00
   00FB 00                  235 	.db 0x00
   00FC 00                  236 	.db 0x00
   00FD 00                  237 	.db 0x00
   00FE 00                  238 	.db 0x00
   00FF 00                  239 	.db 0x00
   0100 00                  240 	.db 0x00
   0101 00                  241 	.db 0x00
   0102 00                  242 	.db 0x00
   0103 00                  243 	.db 0x00
   0104 00                  244 	.db 0x00
   0105 00                  245 	.db 0x00
   0106 00                  246 	.db 0x00
   0107 00                  247 	.db 0x00
   0108 00                  248 	.db 0x00
   0109 00                  249 	.db 0x00
   010A                     250 _card_sprite:
   010Ar00r00               251 	.dw _s_cards_0
   010Cr00r00               252 	.dw _s_cards_1
   010E                     253 _card_description:
   010E 53 57 4F 52 44 3A   254 	.ascii "SWORD:PRODUCES DIRECT DAMAGE TO THE ENEMY"
        50 52 4F 44 55 43
        45 53 20 44 49 52
        45 43 54 20 44 41
        4D 41 47 45 20 54
        4F 20 54 48 45 20
        45 4E 45 4D 59
   0137 00                  255 	.db 0x00
   0138 00                  256 	.db 0x00
   0139 00                  257 	.db 0x00
   013A 00                  258 	.db 0x00
   013B 00                  259 	.db 0x00
   013C 00                  260 	.db 0x00
   013D 00                  261 	.db 0x00
   013E 00                  262 	.db 0x00
   013F 00                  263 	.db 0x00
   0140 53 48 49 45 4C 44   264 	.ascii "SHIELD:PROTECTS SOME DAMAGE"
        3A 50 52 4F 54 45
        43 54 53 20 53 4F
        4D 45 20 44 41 4D
        41 47 45
   015B 00                  265 	.db 0x00
   015C 00                  266 	.db 0x00
   015D 00                  267 	.db 0x00
   015E 00                  268 	.db 0x00
   015F 00                  269 	.db 0x00
   0160 00                  270 	.db 0x00
   0161 00                  271 	.db 0x00
   0162 00                  272 	.db 0x00
   0163 00                  273 	.db 0x00
   0164 00                  274 	.db 0x00
   0165 00                  275 	.db 0x00
   0166 00                  276 	.db 0x00
   0167 00                  277 	.db 0x00
   0168 00                  278 	.db 0x00
   0169 00                  279 	.db 0x00
   016A 00                  280 	.db 0x00
   016B 00                  281 	.db 0x00
   016C 00                  282 	.db 0x00
   016D 00                  283 	.db 0x00
   016E 00                  284 	.db 0x00
   016F 00                  285 	.db 0x00
   0170 00                  286 	.db 0x00
   0171 00                  287 	.db 0x00
                            288 ;src/main.c:103: void initCPC() {
                            289 ;	---------------------------------
                            290 ; Function initCPC
                            291 ; ---------------------------------
   0172                     292 _initCPC::
                            293 ;src/main.c:108: cpct_setPalette(g_palette0, 16);
   0172 21 10 00      [10]  294 	ld	hl, #0x0010
   0175 E5            [11]  295 	push	hl
   0176 21r00r00      [10]  296 	ld	hl, #_g_palette0
   0179 E5            [11]  297 	push	hl
   017A CDr00r00      [17]  298 	call	_cpct_setPalette
                            299 ;src/main.c:109: cpct_setVideoMode(0);
   017D 2E 00         [ 7]  300 	ld	l, #0x00
   017F CDr00r00      [17]  301 	call	_cpct_setVideoMode
                            302 ;src/main.c:110: cpct_memset((u8*)0x8000,0,0x8000);
   0182 21 00 80      [10]  303 	ld	hl, #0x8000
   0185 E5            [11]  304 	push	hl
   0186 AF            [ 4]  305 	xor	a, a
   0187 F5            [11]  306 	push	af
   0188 33            [ 6]  307 	inc	sp
   0189 2E 00         [ 7]  308 	ld	l, #0x00
   018B E5            [11]  309 	push	hl
   018C CDr00r00      [17]  310 	call	_cpct_memset
                            311 ;src/main.c:113: cpct_setCRTCReg(6, 34);
   018F 21 06 22      [10]  312 	ld	hl, #0x2206
   0192 E5            [11]  313 	push	hl
   0193 CDr00r00      [17]  314 	call	_cpct_setCRTCReg
                            315 ;src/main.c:114: cpct_setCRTCReg(7, 35);
   0196 21 07 23      [10]  316 	ld	hl, #0x2307
   0199 E5            [11]  317 	push	hl
   019A CDr00r00      [17]  318 	call	_cpct_setCRTCReg
                            319 ;src/main.c:115: cpct_setVideoMemoryPage(cpct_page80);
   019D 2E 20         [ 7]  320 	ld	l, #0x20
   019F CDr00r00      [17]  321 	call	_cpct_setVideoMemoryPage
                            322 ;src/main.c:118: cpct_waitVSYNC();
   01A2 CDr00r00      [17]  323 	call	_cpct_waitVSYNC
                            324 ;src/main.c:119: cpct_waitHalts(2);
   01A5 2E 02         [ 7]  325 	ld	l, #0x02
   01A7 CDr00r00      [17]  326 	call	_cpct_waitHalts
                            327 ;src/main.c:120: cpct_waitVSYNC();
   01AA CDr00r00      [17]  328 	call	_cpct_waitVSYNC
                            329 ;src/main.c:121: cpct_setInterruptHandler(myInterruptHandler);
   01AD 21r00r00      [10]  330 	ld	hl, #_myInterruptHandler
   01B0 CDr00r00      [17]  331 	call	_cpct_setInterruptHandler
   01B3 C9            [10]  332 	ret
                            333 ;src/main.c:124: void check_keyboard(){
                            334 ;	---------------------------------
                            335 ; Function check_keyboard
                            336 ; ---------------------------------
   01B4                     337 _check_keyboard::
                            338 ;src/main.c:125: if (cpct_isKeyPressed(Key_CursorLeft) && (selected_card>0)){
   01B4 21 01 01      [10]  339 	ld	hl, #0x0101
   01B7 CDr00r00      [17]  340 	call	_cpct_isKeyPressed
   01BA 7D            [ 4]  341 	ld	a, l
   01BB B7            [ 4]  342 	or	a, a
   01BC 28 1A         [12]  343 	jr	Z,00105$
   01BE FD 21r38r00   [14]  344 	ld	iy, #_selected_card
   01C2 FD 7E 00      [19]  345 	ld	a, 0 (iy)
   01C5 B7            [ 4]  346 	or	a, a
   01C6 28 10         [12]  347 	jr	Z,00105$
                            348 ;src/main.c:126: previous_card = selected_card;
   01C8 FD 7E 00      [19]  349 	ld	a, 0 (iy)
   01CB 32r39r00      [13]  350 	ld	(#_previous_card + 0),a
                            351 ;src/main.c:127: selected_card--;
   01CE 21r38r00      [10]  352 	ld	hl, #_selected_card+0
   01D1 35            [11]  353 	dec	(hl)
                            354 ;src/main.c:128: moved = YES;
   01D2 21r4Fr00      [10]  355 	ld	hl,#_moved + 0
   01D5 36 01         [10]  356 	ld	(hl), #0x01
   01D7 C9            [10]  357 	ret
   01D8                     358 00105$:
                            359 ;src/main.c:129: } else if (cpct_isKeyPressed(Key_CursorRight) && (selected_card<num_cards-1)){
   01D8 21 00 02      [10]  360 	ld	hl, #0x0200
   01DB CDr00r00      [17]  361 	call	_cpct_isKeyPressed
   01DE 7D            [ 4]  362 	ld	a, l
   01DF B7            [ 4]  363 	or	a, a
   01E0 C8            [11]  364 	ret	Z
   01E1 21r4Er00      [10]  365 	ld	hl,#_num_cards + 0
   01E4 4E            [ 7]  366 	ld	c, (hl)
   01E5 06 00         [ 7]  367 	ld	b, #0x00
   01E7 0B            [ 6]  368 	dec	bc
   01E8 3Ar38r00      [13]  369 	ld	a,(#_selected_card + 0)
   01EB 16 00         [ 7]  370 	ld	d, #0x00
   01ED 91            [ 4]  371 	sub	a, c
   01EE 7A            [ 4]  372 	ld	a, d
   01EF 98            [ 4]  373 	sbc	a, b
   01F0 E2rF5r01      [10]  374 	jp	PO, 00126$
   01F3 EE 80         [ 7]  375 	xor	a, #0x80
   01F5                     376 00126$:
   01F5 F0            [11]  377 	ret	P
                            378 ;src/main.c:130: previous_card = selected_card;
   01F6 3Ar38r00      [13]  379 	ld	a,(#_selected_card + 0)
   01F9 32r39r00      [13]  380 	ld	(#_previous_card + 0),a
                            381 ;src/main.c:131: selected_card++;
   01FC 21r38r00      [10]  382 	ld	hl, #_selected_card+0
   01FF 34            [11]  383 	inc	(hl)
                            384 ;src/main.c:132: moved = YES;
   0200 21r4Fr00      [10]  385 	ld	hl,#_moved + 0
   0203 36 01         [10]  386 	ld	(hl), #0x01
   0205 C9            [10]  387 	ret
                            388 ;src/main.c:136: void draw_cards(){
                            389 ;	---------------------------------
                            390 ; Function draw_cards
                            391 ; ---------------------------------
   0206                     392 _draw_cards::
   0206 DD E5         [15]  393 	push	ix
   0208 DD 21 00 00   [14]  394 	ld	ix,#0
   020C DD 39         [15]  395 	add	ix,sp
   020E F5            [11]  396 	push	af
   020F 3B            [ 6]  397 	dec	sp
                            398 ;src/main.c:141: cpct_waitVSYNC();
   0210 CDr00r00      [17]  399 	call	_cpct_waitVSYNC
                            400 ;src/main.c:144: pvmem = cpct_getScreenPtr((u8*) VM_START, (previous_card*(S_CARDS_0_W-3))-2, 160);
   0213 3Ar39r00      [13]  401 	ld	a,(#_previous_card + 0)
   0216 4F            [ 4]  402 	ld	c, a
   0217 87            [ 4]  403 	add	a, a
   0218 87            [ 4]  404 	add	a, a
   0219 81            [ 4]  405 	add	a, c
   021A 47            [ 4]  406 	ld	b, a
   021B 05            [ 4]  407 	dec	b
   021C 05            [ 4]  408 	dec	b
   021D 3E A0         [ 7]  409 	ld	a, #0xa0
   021F F5            [11]  410 	push	af
   0220 33            [ 6]  411 	inc	sp
   0221 C5            [11]  412 	push	bc
   0222 33            [ 6]  413 	inc	sp
   0223 21 00 80      [10]  414 	ld	hl, #0x8000
   0226 E5            [11]  415 	push	hl
   0227 CDr00r00      [17]  416 	call	_cpct_getScreenPtr
   022A 22r04r00      [16]  417 	ld	(_pvmem), hl
                            418 ;src/main.c:145: cpct_drawSolidBox(pvmem, 0x33, S_CARDS_0_W+4, S_CARDS_0_H+4);  
   022D 2Ar04r00      [16]  419 	ld	hl, (_pvmem)
   0230 01 0C 2D      [10]  420 	ld	bc, #0x2d0c
   0233 C5            [11]  421 	push	bc
   0234 01 33 00      [10]  422 	ld	bc, #0x0033
   0237 C5            [11]  423 	push	bc
   0238 E5            [11]  424 	push	hl
   0239 CDr00r00      [17]  425 	call	_cpct_drawSolidBox
                            426 ;src/main.c:148: for (i=0;i<selected_card;i++){
   023C DD 36 FD 00   [19]  427 	ld	-3 (ix), #0x00
   0240                     428 00104$:
   0240 21r38r00      [10]  429 	ld	hl, #_selected_card
   0243 DD 7E FD      [19]  430 	ld	a, -3 (ix)
   0246 96            [ 7]  431 	sub	a, (hl)
   0247 D2rE1r02      [10]  432 	jp	NC, 00101$
                            433 ;src/main.c:149: pvmem = cpct_getScreenPtr((u8*) VM_START, 2+(i*(S_CARDS_0_W-3)), 164);
   024A DD 7E FD      [19]  434 	ld	a, -3 (ix)
   024D 4F            [ 4]  435 	ld	c, a
   024E 87            [ 4]  436 	add	a, a
   024F 87            [ 4]  437 	add	a, a
   0250 81            [ 4]  438 	add	a, c
   0251 DD 77 FE      [19]  439 	ld	-2 (ix), a
   0254 47            [ 4]  440 	ld	b, a
   0255 04            [ 4]  441 	inc	b
   0256 04            [ 4]  442 	inc	b
   0257 3E A4         [ 7]  443 	ld	a, #0xa4
   0259 F5            [11]  444 	push	af
   025A 33            [ 6]  445 	inc	sp
   025B C5            [11]  446 	push	bc
   025C 33            [ 6]  447 	inc	sp
   025D 21 00 80      [10]  448 	ld	hl, #0x8000
   0260 E5            [11]  449 	push	hl
   0261 CDr00r00      [17]  450 	call	_cpct_getScreenPtr
   0264 22r04r00      [16]  451 	ld	(_pvmem), hl
                            452 ;src/main.c:150: cpct_drawSprite(card_types[cards[i].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0267 FD 2Ar04r00   [20]  453 	ld	iy, (_pvmem)
   026B DD 6E FD      [19]  454 	ld	l, -3 (ix)
   026E 26 00         [ 7]  455 	ld	h, #0x00
   0270 29            [11]  456 	add	hl, hl
   0271 01r3Ar00      [10]  457 	ld	bc,#_cards
   0274 09            [11]  458 	add	hl,bc
   0275 4D            [ 4]  459 	ld	c, l
   0276 44            [ 4]  460 	ld	b, h
   0277 0A            [ 7]  461 	ld	a, (bc)
   0278 5F            [ 4]  462 	ld	e,a
   0279 16 00         [ 7]  463 	ld	d,#0x00
   027B 6B            [ 4]  464 	ld	l, e
   027C 62            [ 4]  465 	ld	h, d
   027D 29            [11]  466 	add	hl, hl
   027E 19            [11]  467 	add	hl, de
   027F 29            [11]  468 	add	hl, hl
   0280 29            [11]  469 	add	hl, hl
   0281 19            [11]  470 	add	hl, de
   0282 29            [11]  471 	add	hl, hl
   0283 29            [11]  472 	add	hl, hl
   0284 19            [11]  473 	add	hl, de
   0285 11rA0r00      [10]  474 	ld	de, #_card_types
   0288 19            [11]  475 	add	hl, de
   0289 23            [ 6]  476 	inc	hl
   028A 5E            [ 7]  477 	ld	e, (hl)
   028B 23            [ 6]  478 	inc	hl
   028C 56            [ 7]  479 	ld	d, (hl)
   028D C5            [11]  480 	push	bc
   028E 21 08 29      [10]  481 	ld	hl, #0x2908
   0291 E5            [11]  482 	push	hl
   0292 FD E5         [15]  483 	push	iy
   0294 D5            [11]  484 	push	de
   0295 CDr00r00      [17]  485 	call	_cpct_drawSprite
   0298 C1            [10]  486 	pop	bc
                            487 ;src/main.c:151: sprintf(aux_txt,"%1d", card_types[cards[i].type].cost);   
   0299 0A            [ 7]  488 	ld	a, (bc)
   029A 4F            [ 4]  489 	ld	c,a
   029B 06 00         [ 7]  490 	ld	b,#0x00
   029D 69            [ 4]  491 	ld	l, c
   029E 60            [ 4]  492 	ld	h, b
   029F 29            [11]  493 	add	hl, hl
   02A0 09            [11]  494 	add	hl, bc
   02A1 29            [11]  495 	add	hl, hl
   02A2 29            [11]  496 	add	hl, hl
   02A3 09            [11]  497 	add	hl, bc
   02A4 29            [11]  498 	add	hl, hl
   02A5 29            [11]  499 	add	hl, hl
   02A6 09            [11]  500 	add	hl, bc
   02A7 11rA0r00      [10]  501 	ld	de, #_card_types
   02AA 19            [11]  502 	add	hl, de
   02AB 4E            [ 7]  503 	ld	c, (hl)
   02AC 06 00         [ 7]  504 	ld	b, #0x00
   02AE C5            [11]  505 	push	bc
   02AF 21rCFr04      [10]  506 	ld	hl, #___str_2
   02B2 E5            [11]  507 	push	hl
   02B3 21r06r00      [10]  508 	ld	hl, #_aux_txt
   02B6 E5            [11]  509 	push	hl
   02B7 CDr00r00      [17]  510 	call	_sprintf
   02BA 21 06 00      [10]  511 	ld	hl, #6
   02BD 39            [11]  512 	add	hl, sp
   02BE F9            [ 6]  513 	ld	sp, hl
                            514 ;src/main.c:152: drawText(aux_txt, 3+(i*(S_CARDS_0_W-3)),165, COLORTXT_WHITE ,NORMALHEIGHT);
   02BF DD 46 FE      [19]  515 	ld	b, -2 (ix)
   02C2 04            [ 4]  516 	inc	b
   02C3 04            [ 4]  517 	inc	b
   02C4 04            [ 4]  518 	inc	b
   02C5 21 00 01      [10]  519 	ld	hl, #0x0100
   02C8 E5            [11]  520 	push	hl
   02C9 3E A5         [ 7]  521 	ld	a, #0xa5
   02CB F5            [11]  522 	push	af
   02CC 33            [ 6]  523 	inc	sp
   02CD C5            [11]  524 	push	bc
   02CE 33            [ 6]  525 	inc	sp
   02CF 21r06r00      [10]  526 	ld	hl, #_aux_txt
   02D2 E5            [11]  527 	push	hl
   02D3 CDr00r00      [17]  528 	call	_drawText
   02D6 21 06 00      [10]  529 	ld	hl, #6
   02D9 39            [11]  530 	add	hl, sp
   02DA F9            [ 6]  531 	ld	sp, hl
                            532 ;src/main.c:148: for (i=0;i<selected_card;i++){
   02DB DD 34 FD      [23]  533 	inc	-3 (ix)
   02DE C3r40r02      [10]  534 	jp	00104$
   02E1                     535 00101$:
                            536 ;src/main.c:156: for (i=selected_card+1;i<num_cards;i++){
   02E1 3Ar38r00      [13]  537 	ld	a,(#_selected_card + 0)
   02E4 3C            [ 4]  538 	inc	a
   02E5 DD 77 FE      [19]  539 	ld	-2 (ix), a
   02E8                     540 00107$:
   02E8 21r4Er00      [10]  541 	ld	hl, #_num_cards
   02EB DD 7E FE      [19]  542 	ld	a, -2 (ix)
   02EE 96            [ 7]  543 	sub	a, (hl)
   02EF D2r8Br03      [10]  544 	jp	NC, 00102$
                            545 ;src/main.c:157: pvmem = cpct_getScreenPtr((u8*) VM_START, 4+(i*(S_CARDS_0_W-3)), 164);
   02F2 DD 7E FE      [19]  546 	ld	a, -2 (ix)
   02F5 4F            [ 4]  547 	ld	c, a
   02F6 87            [ 4]  548 	add	a, a
   02F7 87            [ 4]  549 	add	a, a
   02F8 81            [ 4]  550 	add	a, c
   02F9 DD 77 FF      [19]  551 	ld	-1 (ix), a
   02FC 47            [ 4]  552 	ld	b, a
   02FD 04            [ 4]  553 	inc	b
   02FE 04            [ 4]  554 	inc	b
   02FF 04            [ 4]  555 	inc	b
   0300 04            [ 4]  556 	inc	b
   0301 3E A4         [ 7]  557 	ld	a, #0xa4
   0303 F5            [11]  558 	push	af
   0304 33            [ 6]  559 	inc	sp
   0305 C5            [11]  560 	push	bc
   0306 33            [ 6]  561 	inc	sp
   0307 21 00 80      [10]  562 	ld	hl, #0x8000
   030A E5            [11]  563 	push	hl
   030B CDr00r00      [17]  564 	call	_cpct_getScreenPtr
   030E 22r04r00      [16]  565 	ld	(_pvmem), hl
                            566 ;src/main.c:158: cpct_drawSprite(card_types[cards[i].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0311 FD 2Ar04r00   [20]  567 	ld	iy, (_pvmem)
   0315 DD 6E FE      [19]  568 	ld	l, -2 (ix)
   0318 26 00         [ 7]  569 	ld	h, #0x00
   031A 29            [11]  570 	add	hl, hl
   031B 01r3Ar00      [10]  571 	ld	bc,#_cards
   031E 09            [11]  572 	add	hl,bc
   031F 4D            [ 4]  573 	ld	c, l
   0320 44            [ 4]  574 	ld	b, h
   0321 0A            [ 7]  575 	ld	a, (bc)
   0322 5F            [ 4]  576 	ld	e,a
   0323 16 00         [ 7]  577 	ld	d,#0x00
   0325 6B            [ 4]  578 	ld	l, e
   0326 62            [ 4]  579 	ld	h, d
   0327 29            [11]  580 	add	hl, hl
   0328 19            [11]  581 	add	hl, de
   0329 29            [11]  582 	add	hl, hl
   032A 29            [11]  583 	add	hl, hl
   032B 19            [11]  584 	add	hl, de
   032C 29            [11]  585 	add	hl, hl
   032D 29            [11]  586 	add	hl, hl
   032E 19            [11]  587 	add	hl, de
   032F 11rA0r00      [10]  588 	ld	de, #_card_types
   0332 19            [11]  589 	add	hl, de
   0333 23            [ 6]  590 	inc	hl
   0334 5E            [ 7]  591 	ld	e, (hl)
   0335 23            [ 6]  592 	inc	hl
   0336 56            [ 7]  593 	ld	d, (hl)
   0337 C5            [11]  594 	push	bc
   0338 21 08 29      [10]  595 	ld	hl, #0x2908
   033B E5            [11]  596 	push	hl
   033C FD E5         [15]  597 	push	iy
   033E D5            [11]  598 	push	de
   033F CDr00r00      [17]  599 	call	_cpct_drawSprite
   0342 C1            [10]  600 	pop	bc
                            601 ;src/main.c:159: sprintf(aux_txt,"%1d", card_types[cards[i].type].cost);   
   0343 0A            [ 7]  602 	ld	a, (bc)
   0344 4F            [ 4]  603 	ld	c,a
   0345 06 00         [ 7]  604 	ld	b,#0x00
   0347 69            [ 4]  605 	ld	l, c
   0348 60            [ 4]  606 	ld	h, b
   0349 29            [11]  607 	add	hl, hl
   034A 09            [11]  608 	add	hl, bc
   034B 29            [11]  609 	add	hl, hl
   034C 29            [11]  610 	add	hl, hl
   034D 09            [11]  611 	add	hl, bc
   034E 29            [11]  612 	add	hl, hl
   034F 29            [11]  613 	add	hl, hl
   0350 09            [11]  614 	add	hl, bc
   0351 11rA0r00      [10]  615 	ld	de, #_card_types
   0354 19            [11]  616 	add	hl, de
   0355 4E            [ 7]  617 	ld	c, (hl)
   0356 06 00         [ 7]  618 	ld	b, #0x00
   0358 C5            [11]  619 	push	bc
   0359 21rCFr04      [10]  620 	ld	hl, #___str_2
   035C E5            [11]  621 	push	hl
   035D 21r06r00      [10]  622 	ld	hl, #_aux_txt
   0360 E5            [11]  623 	push	hl
   0361 CDr00r00      [17]  624 	call	_sprintf
   0364 21 06 00      [10]  625 	ld	hl, #6
   0367 39            [11]  626 	add	hl, sp
   0368 F9            [ 6]  627 	ld	sp, hl
                            628 ;src/main.c:160: drawText(aux_txt, 5+(i*(S_CARDS_0_W-3)),165, COLORTXT_WHITE ,NORMALHEIGHT);
   0369 DD 7E FF      [19]  629 	ld	a, -1 (ix)
   036C C6 05         [ 7]  630 	add	a, #0x05
   036E 47            [ 4]  631 	ld	b, a
   036F 21 00 01      [10]  632 	ld	hl, #0x0100
   0372 E5            [11]  633 	push	hl
   0373 3E A5         [ 7]  634 	ld	a, #0xa5
   0375 F5            [11]  635 	push	af
   0376 33            [ 6]  636 	inc	sp
   0377 C5            [11]  637 	push	bc
   0378 33            [ 6]  638 	inc	sp
   0379 21r06r00      [10]  639 	ld	hl, #_aux_txt
   037C E5            [11]  640 	push	hl
   037D CDr00r00      [17]  641 	call	_drawText
   0380 21 06 00      [10]  642 	ld	hl, #6
   0383 39            [11]  643 	add	hl, sp
   0384 F9            [ 6]  644 	ld	sp, hl
                            645 ;src/main.c:156: for (i=selected_card+1;i<num_cards;i++){
   0385 DD 34 FE      [23]  646 	inc	-2 (ix)
   0388 C3rE8r02      [10]  647 	jp	00107$
   038B                     648 00102$:
                            649 ;src/main.c:164: pvmem = cpct_getScreenPtr((u8*) VM_START, 3+(selected_card*(S_CARDS_0_W-3)), 160);
   038B 3Ar38r00      [13]  650 	ld	a,(#_selected_card + 0)
   038E 4F            [ 4]  651 	ld	c, a
   038F 87            [ 4]  652 	add	a, a
   0390 87            [ 4]  653 	add	a, a
   0391 81            [ 4]  654 	add	a, c
   0392 47            [ 4]  655 	ld	b, a
   0393 04            [ 4]  656 	inc	b
   0394 04            [ 4]  657 	inc	b
   0395 04            [ 4]  658 	inc	b
   0396 3E A0         [ 7]  659 	ld	a, #0xa0
   0398 F5            [11]  660 	push	af
   0399 33            [ 6]  661 	inc	sp
   039A C5            [11]  662 	push	bc
   039B 33            [ 6]  663 	inc	sp
   039C 21 00 80      [10]  664 	ld	hl, #0x8000
   039F E5            [11]  665 	push	hl
   03A0 CDr00r00      [17]  666 	call	_cpct_getScreenPtr
   03A3 22r04r00      [16]  667 	ld	(_pvmem), hl
                            668 ;src/main.c:165: cpct_drawSprite(card_types[cards[selected_card].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   03A6 ED 4Br04r00   [20]  669 	ld	bc, (_pvmem)
   03AA FD 21r38r00   [14]  670 	ld	iy, #_selected_card
   03AE FD 6E 00      [19]  671 	ld	l, 0 (iy)
   03B1 26 00         [ 7]  672 	ld	h, #0x00
   03B3 29            [11]  673 	add	hl, hl
   03B4 11r3Ar00      [10]  674 	ld	de, #_cards
   03B7 19            [11]  675 	add	hl, de
   03B8 5E            [ 7]  676 	ld	e, (hl)
   03B9 16 00         [ 7]  677 	ld	d,#0x00
   03BB 6B            [ 4]  678 	ld	l, e
   03BC 62            [ 4]  679 	ld	h, d
   03BD 29            [11]  680 	add	hl, hl
   03BE 19            [11]  681 	add	hl, de
   03BF 29            [11]  682 	add	hl, hl
   03C0 29            [11]  683 	add	hl, hl
   03C1 19            [11]  684 	add	hl, de
   03C2 29            [11]  685 	add	hl, hl
   03C3 29            [11]  686 	add	hl, hl
   03C4 19            [11]  687 	add	hl, de
   03C5 11rA0r00      [10]  688 	ld	de, #_card_types
   03C8 19            [11]  689 	add	hl, de
   03C9 23            [ 6]  690 	inc	hl
   03CA 5E            [ 7]  691 	ld	e, (hl)
   03CB 23            [ 6]  692 	inc	hl
   03CC 56            [ 7]  693 	ld	d, (hl)
   03CD 21 08 29      [10]  694 	ld	hl, #0x2908
   03D0 E5            [11]  695 	push	hl
   03D1 C5            [11]  696 	push	bc
   03D2 D5            [11]  697 	push	de
   03D3 CDr00r00      [17]  698 	call	_cpct_drawSprite
                            699 ;src/main.c:166: sprintf(aux_txt,"%1d", card_types[cards[selected_card].type].cost);   
   03D6 FD 21r38r00   [14]  700 	ld	iy, #_selected_card
   03DA FD 6E 00      [19]  701 	ld	l, 0 (iy)
   03DD 26 00         [ 7]  702 	ld	h, #0x00
   03DF 29            [11]  703 	add	hl, hl
   03E0 11r3Ar00      [10]  704 	ld	de, #_cards
   03E3 19            [11]  705 	add	hl, de
   03E4 4E            [ 7]  706 	ld	c, (hl)
   03E5 06 00         [ 7]  707 	ld	b,#0x00
   03E7 69            [ 4]  708 	ld	l, c
   03E8 60            [ 4]  709 	ld	h, b
   03E9 29            [11]  710 	add	hl, hl
   03EA 09            [11]  711 	add	hl, bc
   03EB 29            [11]  712 	add	hl, hl
   03EC 29            [11]  713 	add	hl, hl
   03ED 09            [11]  714 	add	hl, bc
   03EE 29            [11]  715 	add	hl, hl
   03EF 29            [11]  716 	add	hl, hl
   03F0 09            [11]  717 	add	hl, bc
   03F1 11rA0r00      [10]  718 	ld	de, #_card_types
   03F4 19            [11]  719 	add	hl, de
   03F5 4E            [ 7]  720 	ld	c, (hl)
   03F6 06 00         [ 7]  721 	ld	b, #0x00
   03F8 C5            [11]  722 	push	bc
   03F9 21rCFr04      [10]  723 	ld	hl, #___str_2
   03FC E5            [11]  724 	push	hl
   03FD 21r06r00      [10]  725 	ld	hl, #_aux_txt
   0400 E5            [11]  726 	push	hl
   0401 CDr00r00      [17]  727 	call	_sprintf
   0404 21 06 00      [10]  728 	ld	hl, #6
   0407 39            [11]  729 	add	hl, sp
   0408 F9            [ 6]  730 	ld	sp, hl
                            731 ;src/main.c:167: drawText(aux_txt, 4+(selected_card*(S_CARDS_0_W-3)), 161, COLORTXT_WHITE ,NORMALHEIGHT);
   0409 3Ar38r00      [13]  732 	ld	a,(#_selected_card + 0)
   040C 4F            [ 4]  733 	ld	c, a
   040D 87            [ 4]  734 	add	a, a
   040E 87            [ 4]  735 	add	a, a
   040F 81            [ 4]  736 	add	a, c
   0410 47            [ 4]  737 	ld	b, a
   0411 04            [ 4]  738 	inc	b
   0412 04            [ 4]  739 	inc	b
   0413 04            [ 4]  740 	inc	b
   0414 04            [ 4]  741 	inc	b
   0415 21 00 01      [10]  742 	ld	hl, #0x0100
   0418 E5            [11]  743 	push	hl
   0419 3E A1         [ 7]  744 	ld	a, #0xa1
   041B F5            [11]  745 	push	af
   041C 33            [ 6]  746 	inc	sp
   041D C5            [11]  747 	push	bc
   041E 33            [ 6]  748 	inc	sp
   041F 21r06r00      [10]  749 	ld	hl, #_aux_txt
   0422 E5            [11]  750 	push	hl
   0423 CDr00r00      [17]  751 	call	_drawText
   0426 21 06 00      [10]  752 	ld	hl, #6
   0429 39            [11]  753 	add	hl, sp
   042A F9            [ 6]  754 	ld	sp, hl
                            755 ;src/main.c:171: pvmem = cpct_getScreenPtr((u8*) VM_START, 10, 234);
   042B 21 0A EA      [10]  756 	ld	hl, #0xea0a
   042E E5            [11]  757 	push	hl
   042F 21 00 80      [10]  758 	ld	hl, #0x8000
   0432 E5            [11]  759 	push	hl
   0433 CDr00r00      [17]  760 	call	_cpct_getScreenPtr
   0436 22r04r00      [16]  761 	ld	(_pvmem), hl
                            762 ;src/main.c:172: cpct_drawSolidBox(pvmem, 0x00, 50, 9);
   0439 2Ar04r00      [16]  763 	ld	hl, (_pvmem)
   043C 01 32 09      [10]  764 	ld	bc, #0x0932
   043F C5            [11]  765 	push	bc
   0440 01 00 00      [10]  766 	ld	bc, #0x0000
   0443 C5            [11]  767 	push	bc
   0444 E5            [11]  768 	push	hl
   0445 CDr00r00      [17]  769 	call	_cpct_drawSolidBox
                            770 ;src/main.c:174: drawTextM1(card_types[cards[selected_card].type].description,10,234,NORMALHEIGHT);
   0448 FD 21r38r00   [14]  771 	ld	iy, #_selected_card
   044C FD 6E 00      [19]  772 	ld	l, 0 (iy)
   044F 26 00         [ 7]  773 	ld	h, #0x00
   0451 29            [11]  774 	add	hl, hl
   0452 11r3Ar00      [10]  775 	ld	de, #_cards
   0455 19            [11]  776 	add	hl, de
   0456 4E            [ 7]  777 	ld	c, (hl)
   0457 06 00         [ 7]  778 	ld	b,#0x00
   0459 69            [ 4]  779 	ld	l, c
   045A 60            [ 4]  780 	ld	h, b
   045B 29            [11]  781 	add	hl, hl
   045C 09            [11]  782 	add	hl, bc
   045D 29            [11]  783 	add	hl, hl
   045E 29            [11]  784 	add	hl, hl
   045F 09            [11]  785 	add	hl, bc
   0460 29            [11]  786 	add	hl, hl
   0461 29            [11]  787 	add	hl, hl
   0462 09            [11]  788 	add	hl, bc
   0463 11rA0r00      [10]  789 	ld	de, #_card_types
   0466 19            [11]  790 	add	hl, de
   0467 23            [ 6]  791 	inc	hl
   0468 23            [ 6]  792 	inc	hl
   0469 23            [ 6]  793 	inc	hl
   046A 4D            [ 4]  794 	ld	c, l
   046B 44            [ 4]  795 	ld	b, h
   046C 21 EA 01      [10]  796 	ld	hl, #0x01ea
   046F E5            [11]  797 	push	hl
   0470 3E 0A         [ 7]  798 	ld	a, #0x0a
   0472 F5            [11]  799 	push	af
   0473 33            [ 6]  800 	inc	sp
   0474 C5            [11]  801 	push	bc
   0475 CDr00r00      [17]  802 	call	_drawTextM1
   0478 F1            [10]  803 	pop	af
   0479 F1            [10]  804 	pop	af
   047A 33            [ 6]  805 	inc	sp
                            806 ;src/main.c:177: sprintf(aux_txt, "PREVIOUS:%1d", previous_card);
   047B 21r39r00      [10]  807 	ld	hl,#_previous_card + 0
   047E 4E            [ 7]  808 	ld	c, (hl)
   047F 06 00         [ 7]  809 	ld	b, #0x00
   0481 C5            [11]  810 	push	bc
   0482 21rD3r04      [10]  811 	ld	hl, #___str_3
   0485 E5            [11]  812 	push	hl
   0486 21r06r00      [10]  813 	ld	hl, #_aux_txt
   0489 E5            [11]  814 	push	hl
   048A CDr00r00      [17]  815 	call	_sprintf
   048D 21 06 00      [10]  816 	ld	hl, #6
   0490 39            [11]  817 	add	hl, sp
   0491 F9            [ 6]  818 	ld	sp, hl
                            819 ;src/main.c:178: drawTextM1(aux_txt,10,244,NORMALHEIGHT);
   0492 21 F4 01      [10]  820 	ld	hl, #0x01f4
   0495 E5            [11]  821 	push	hl
   0496 3E 0A         [ 7]  822 	ld	a, #0x0a
   0498 F5            [11]  823 	push	af
   0499 33            [ 6]  824 	inc	sp
   049A 21r06r00      [10]  825 	ld	hl, #_aux_txt
   049D E5            [11]  826 	push	hl
   049E CDr00r00      [17]  827 	call	_drawTextM1
   04A1 F1            [10]  828 	pop	af
   04A2 F1            [10]  829 	pop	af
   04A3 33            [ 6]  830 	inc	sp
                            831 ;src/main.c:179: sprintf(aux_txt, "SELECTED:%1d", selected_card);
   04A4 21r38r00      [10]  832 	ld	hl,#_selected_card + 0
   04A7 4E            [ 7]  833 	ld	c, (hl)
   04A8 06 00         [ 7]  834 	ld	b, #0x00
   04AA C5            [11]  835 	push	bc
   04AB 21rE0r04      [10]  836 	ld	hl, #___str_4
   04AE E5            [11]  837 	push	hl
   04AF 21r06r00      [10]  838 	ld	hl, #_aux_txt
   04B2 E5            [11]  839 	push	hl
   04B3 CDr00r00      [17]  840 	call	_sprintf
   04B6 21 06 00      [10]  841 	ld	hl, #6
   04B9 39            [11]  842 	add	hl, sp
   04BA F9            [ 6]  843 	ld	sp, hl
                            844 ;src/main.c:180: drawTextM1(aux_txt,10,254,NORMALHEIGHT);
   04BB 21 FE 01      [10]  845 	ld	hl, #0x01fe
   04BE E5            [11]  846 	push	hl
   04BF 3E 0A         [ 7]  847 	ld	a, #0x0a
   04C1 F5            [11]  848 	push	af
   04C2 33            [ 6]  849 	inc	sp
   04C3 21r06r00      [10]  850 	ld	hl, #_aux_txt
   04C6 E5            [11]  851 	push	hl
   04C7 CDr00r00      [17]  852 	call	_drawTextM1
   04CA DD F9         [10]  853 	ld	sp,ix
   04CC DD E1         [14]  854 	pop	ix
   04CE C9            [10]  855 	ret
   04CF                     856 ___str_2:
   04CF 25 31 64            857 	.ascii "%1d"
   04D2 00                  858 	.db 0x00
   04D3                     859 ___str_3:
   04D3 50 52 45 56 49 4F   860 	.ascii "PREVIOUS:%1d"
        55 53 3A 25 31 64
   04DF 00                  861 	.db 0x00
   04E0                     862 ___str_4:
   04E0 53 45 4C 45 43 54   863 	.ascii "SELECTED:%1d"
        45 44 3A 25 31 64
   04EC 00                  864 	.db 0x00
                            865 ;src/main.c:184: void update_selected_card(){
                            866 ;	---------------------------------
                            867 ; Function update_selected_card
                            868 ; ---------------------------------
   04ED                     869 _update_selected_card::
                            870 ;src/main.c:186: if (selected_card>0){
   04ED 3Ar38r00      [13]  871 	ld	a,(#_selected_card + 0)
   04F0 B7            [ 4]  872 	or	a, a
   04F1 28 2A         [12]  873 	jr	Z,00102$
                            874 ;src/main.c:187: pvmem = cpct_getScreenPtr((u8*) VM_START, (previous_card*(S_CARDS_0_W))-2, 160);
   04F3 3Ar39r00      [13]  875 	ld	a,(#_previous_card + 0)
   04F6 07            [ 4]  876 	rlca
   04F7 07            [ 4]  877 	rlca
   04F8 07            [ 4]  878 	rlca
   04F9 E6 F8         [ 7]  879 	and	a, #0xf8
   04FB 47            [ 4]  880 	ld	b, a
   04FC 05            [ 4]  881 	dec	b
   04FD 05            [ 4]  882 	dec	b
   04FE 3E A0         [ 7]  883 	ld	a, #0xa0
   0500 F5            [11]  884 	push	af
   0501 33            [ 6]  885 	inc	sp
   0502 C5            [11]  886 	push	bc
   0503 33            [ 6]  887 	inc	sp
   0504 21 00 80      [10]  888 	ld	hl, #0x8000
   0507 E5            [11]  889 	push	hl
   0508 CDr00r00      [17]  890 	call	_cpct_getScreenPtr
   050B 22r04r00      [16]  891 	ld	(_pvmem), hl
                            892 ;src/main.c:188: cpct_drawSolidBox(pvmem, 0x33, S_CARDS_0_W, 5);
   050E 2Ar04r00      [16]  893 	ld	hl, (_pvmem)
   0511 01 08 05      [10]  894 	ld	bc, #0x0508
   0514 C5            [11]  895 	push	bc
   0515 01 33 00      [10]  896 	ld	bc, #0x0033
   0518 C5            [11]  897 	push	bc
   0519 E5            [11]  898 	push	hl
   051A CDr00r00      [17]  899 	call	_cpct_drawSolidBox
   051D                     900 00102$:
                            901 ;src/main.c:191: pvmem = cpct_getScreenPtr((u8*) VM_START, 2+(selected_card*(S_CARDS_0_W-3)), 164);
   051D 3Ar38r00      [13]  902 	ld	a,(#_selected_card + 0)
   0520 4F            [ 4]  903 	ld	c, a
   0521 87            [ 4]  904 	add	a, a
   0522 87            [ 4]  905 	add	a, a
   0523 81            [ 4]  906 	add	a, c
   0524 47            [ 4]  907 	ld	b, a
   0525 04            [ 4]  908 	inc	b
   0526 04            [ 4]  909 	inc	b
   0527 3E A4         [ 7]  910 	ld	a, #0xa4
   0529 F5            [11]  911 	push	af
   052A 33            [ 6]  912 	inc	sp
   052B C5            [11]  913 	push	bc
   052C 33            [ 6]  914 	inc	sp
   052D 21 00 80      [10]  915 	ld	hl, #0x8000
   0530 E5            [11]  916 	push	hl
   0531 CDr00r00      [17]  917 	call	_cpct_getScreenPtr
   0534 22r04r00      [16]  918 	ld	(_pvmem), hl
                            919 ;src/main.c:192: cpct_drawSprite(card_types[cards[selected_card].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0537 ED 5Br04r00   [20]  920 	ld	de, (_pvmem)
   053B 01r3Ar00      [10]  921 	ld	bc, #_cards+0
   053E FD 21r38r00   [14]  922 	ld	iy, #_selected_card
   0542 FD 6E 00      [19]  923 	ld	l, 0 (iy)
   0545 26 00         [ 7]  924 	ld	h, #0x00
   0547 29            [11]  925 	add	hl, hl
   0548 09            [11]  926 	add	hl, bc
   0549 4E            [ 7]  927 	ld	c, (hl)
   054A 06 00         [ 7]  928 	ld	b,#0x00
   054C 69            [ 4]  929 	ld	l, c
   054D 60            [ 4]  930 	ld	h, b
   054E 29            [11]  931 	add	hl, hl
   054F 09            [11]  932 	add	hl, bc
   0550 29            [11]  933 	add	hl, hl
   0551 29            [11]  934 	add	hl, hl
   0552 09            [11]  935 	add	hl, bc
   0553 29            [11]  936 	add	hl, hl
   0554 29            [11]  937 	add	hl, hl
   0555 09            [11]  938 	add	hl, bc
   0556 01rA0r00      [10]  939 	ld	bc, #_card_types
   0559 09            [11]  940 	add	hl, bc
   055A 23            [ 6]  941 	inc	hl
   055B 4E            [ 7]  942 	ld	c, (hl)
   055C 23            [ 6]  943 	inc	hl
   055D 46            [ 7]  944 	ld	b, (hl)
   055E 21 08 29      [10]  945 	ld	hl, #0x2908
   0561 E5            [11]  946 	push	hl
   0562 D5            [11]  947 	push	de
   0563 C5            [11]  948 	push	bc
   0564 CDr00r00      [17]  949 	call	_cpct_drawSprite
   0567 C9            [10]  950 	ret
                            951 ;src/main.c:195: void init_cards(){
                            952 ;	---------------------------------
                            953 ; Function init_cards
                            954 ; ---------------------------------
   0568                     955 _init_cards::
                            956 ;src/main.c:198: num_cards = (cpct_rand() % 9) + 1;
   0568 CDr00r00      [17]  957 	call	_cpct_getRandom_mxor_u8
   056B 45            [ 4]  958 	ld	b, l
   056C 3E 09         [ 7]  959 	ld	a, #0x09
   056E F5            [11]  960 	push	af
   056F 33            [ 6]  961 	inc	sp
   0570 C5            [11]  962 	push	bc
   0571 33            [ 6]  963 	inc	sp
   0572 CDr00r00      [17]  964 	call	__moduchar
   0575 F1            [10]  965 	pop	af
   0576 7D            [ 4]  966 	ld	a, l
   0577 21r4Er00      [10]  967 	ld	hl, #_num_cards
   057A 3C            [ 4]  968 	inc	a
   057B 77            [ 7]  969 	ld	(hl), a
                            970 ;src/main.c:199: for (i=0;i<num_cards;i++){
   057C 0E 00         [ 7]  971 	ld	c, #0x00
   057E                     972 00103$:
   057E 21r4Er00      [10]  973 	ld	hl, #_num_cards
   0581 79            [ 4]  974 	ld	a, c
   0582 96            [ 7]  975 	sub	a, (hl)
   0583 D2r06r02      [10]  976 	jp	NC,_draw_cards
                            977 ;src/main.c:200: cards[i].type = cpct_rand() % 2;
   0586 69            [ 4]  978 	ld	l, c
   0587 26 00         [ 7]  979 	ld	h, #0x00
   0589 29            [11]  980 	add	hl, hl
   058A 11r3Ar00      [10]  981 	ld	de, #_cards
   058D 19            [11]  982 	add	hl, de
   058E E5            [11]  983 	push	hl
   058F C5            [11]  984 	push	bc
   0590 CDr00r00      [17]  985 	call	_cpct_getRandom_mxor_u8
   0593 7D            [ 4]  986 	ld	a, l
   0594 C1            [10]  987 	pop	bc
   0595 E1            [10]  988 	pop	hl
   0596 E6 01         [ 7]  989 	and	a, #0x01
   0598 77            [ 7]  990 	ld	(hl), a
                            991 ;src/main.c:199: for (i=0;i<num_cards;i++){
   0599 0C            [ 4]  992 	inc	c
   059A 18 E2         [12]  993 	jr	00103$
                            994 ;src/main.c:203: draw_cards();
   059C C3r06r02      [10]  995 	jp  _draw_cards
                            996 ;src/main.c:206: void main(void) {
                            997 ;	---------------------------------
                            998 ; Function main
                            999 ; ---------------------------------
   059F                    1000 _main::
                           1001 ;src/main.c:207: cpct_disableFirmware();
   059F CDr00r00      [17] 1002 	call	_cpct_disableFirmware
                           1003 ;src/main.c:208: cpct_setStackLocation((u8*) 0x7fff);
   05A2 21 FF 7F      [10] 1004 	ld	hl, #0x7fff
   05A5 CDr00r00      [17] 1005 	call	_cpct_setStackLocation
                           1006 ;src/main.c:210: initCPC();
   05A8 CDr72r01      [17] 1007 	call	_initCPC
                           1008 ;src/main.c:212: selected_card = 4;
   05AB 21r38r00      [10] 1009 	ld	hl,#_selected_card + 0
   05AE 36 04         [10] 1010 	ld	(hl), #0x04
                           1011 ;src/main.c:213: previous_card = 4;
   05B0 21r39r00      [10] 1012 	ld	hl,#_previous_card + 0
   05B3 36 04         [10] 1013 	ld	(hl), #0x04
                           1014 ;src/main.c:214: moved = NO;
   05B5 21r4Fr00      [10] 1015 	ld	hl,#_moved + 0
   05B8 36 00         [10] 1016 	ld	(hl), #0x00
                           1017 ;src/main.c:216: drawTextM1("CARD HERO - DECK BUILDING GAME",10,0,NORMALHEIGHT);
   05BA 21 00 01      [10] 1018 	ld	hl, #0x0100
   05BD E5            [11] 1019 	push	hl
   05BE 3E 0A         [ 7] 1020 	ld	a, #0x0a
   05C0 F5            [11] 1021 	push	af
   05C1 33            [ 6] 1022 	inc	sp
   05C2 21rE5r05      [10] 1023 	ld	hl, #___str_5
   05C5 E5            [11] 1024 	push	hl
   05C6 CDr00r00      [17] 1025 	call	_drawTextM1
   05C9 F1            [10] 1026 	pop	af
   05CA F1            [10] 1027 	pop	af
   05CB 33            [ 6] 1028 	inc	sp
                           1029 ;src/main.c:218: init_cards();
   05CC CDr68r05      [17] 1030 	call	_init_cards
                           1031 ;src/main.c:220: draw_cards();
   05CF CDr06r02      [17] 1032 	call	_draw_cards
                           1033 ;src/main.c:223: while (1){
   05D2                    1034 00104$:
                           1035 ;src/main.c:224: check_keyboard();
   05D2 CDrB4r01      [17] 1036 	call	_check_keyboard
                           1037 ;src/main.c:225: if (moved){
   05D5 3Ar4Fr00      [13] 1038 	ld	a,(#_moved + 0)
   05D8 B7            [ 4] 1039 	or	a, a
   05D9 28 F7         [12] 1040 	jr	Z,00104$
                           1041 ;src/main.c:226: draw_cards();
   05DB CDr06r02      [17] 1042 	call	_draw_cards
                           1043 ;src/main.c:227: moved = NO;
   05DE 21r4Fr00      [10] 1044 	ld	hl,#_moved + 0
   05E1 36 00         [10] 1045 	ld	(hl), #0x00
   05E3 18 ED         [12] 1046 	jr	00104$
   05E5                    1047 ___str_5:
   05E5 43 41 52 44 20 48  1048 	.ascii "CARD HERO - DECK BUILDING GAME"
        45 52 4F 20 2D 20
        44 45 43 4B 20 42
        55 49 4C 44 49 4E
        47 20 47 41 4D 45
   0603 00                 1049 	.db 0x00
                           1050 	.area _CODE
                           1051 	.area _INITIALIZER
                           1052 	.area _CABS (ABS)
