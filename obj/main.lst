                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _init_cards
                             13 	.globl _update_selected_card
                             14 	.globl _draw_cards
                             15 	.globl _check_keyboard
                             16 	.globl _initCPC
                             17 	.globl _myInterruptHandler
                             18 	.globl _drawTextM1
                             19 	.globl _sprintf
                             20 	.globl _cpct_getRandom_mxor_u8
                             21 	.globl _cpct_setCRTCReg
                             22 	.globl _cpct_getScreenPtr
                             23 	.globl _cpct_setPALColour
                             24 	.globl _cpct_setPalette
                             25 	.globl _cpct_waitVSYNC
                             26 	.globl _cpct_setVideoMode
                             27 	.globl _cpct_drawSprite
                             28 	.globl _cpct_drawSolidBox
                             29 	.globl _cpct_isKeyPressed
                             30 	.globl _cpct_scanKeyboard
                             31 	.globl _cpct_waitHalts
                             32 	.globl _cpct_setStackLocation
                             33 	.globl _cpct_memset
                             34 	.globl _cpct_setInterruptHandler
                             35 	.globl _cpct_disableFirmware
                             36 	.globl _moved
                             37 	.globl _num_cards
                             38 	.globl _cards
                             39 	.globl _previous_card
                             40 	.globl _selected_card
                             41 	.globl _aux_txt
                             42 	.globl _pvmem
                             43 	.globl _i_time
                             44 	.globl _cost_sprite
                             45 	.globl _card_description
                             46 	.globl _card_sprite
                             47 	.globl _card_types
                             48 ;--------------------------------------------------------
                             49 ; special function registers
                             50 ;--------------------------------------------------------
                             51 ;--------------------------------------------------------
                             52 ; ram data
                             53 ;--------------------------------------------------------
                             54 	.area _DATA
   0000                      55 _i_time::
   0000                      56 	.ds 4
   0004                      57 _pvmem::
   0004                      58 	.ds 2
   0006                      59 _aux_txt::
   0006                      60 	.ds 50
   0038                      61 _selected_card::
   0038                      62 	.ds 1
   0039                      63 _previous_card::
   0039                      64 	.ds 1
   003A                      65 _cards::
   003A                      66 	.ds 20
   004E                      67 _num_cards::
   004E                      68 	.ds 1
   004F                      69 _moved::
   004F                      70 	.ds 1
   0050                      71 _myInterruptHandler_g_nInterrupt_1_125:
   0050                      72 	.ds 1
                             73 ;--------------------------------------------------------
                             74 ; ram data
                             75 ;--------------------------------------------------------
                             76 	.area _INITIALIZED
                             77 ;--------------------------------------------------------
                             78 ; absolute external ram data
                             79 ;--------------------------------------------------------
                             80 	.area _DABS (ABS)
                             81 ;--------------------------------------------------------
                             82 ; global & static initialisations
                             83 ;--------------------------------------------------------
                             84 	.area _HOME
                             85 	.area _GSINIT
                             86 	.area _GSFINAL
                             87 	.area _GSINIT
                             88 ;src/main.c:63: static u8 g_nInterrupt = 0; // Manage Interrupt
   0000 FD 21r50r00   [14]   89 	ld	iy, #_myInterruptHandler_g_nInterrupt_1_125
   0004 FD 36 00 00   [19]   90 	ld	0 (iy), #0x00
                             91 ;--------------------------------------------------------
                             92 ; Home
                             93 ;--------------------------------------------------------
                             94 	.area _HOME
                             95 	.area _HOME
                             96 ;--------------------------------------------------------
                             97 ; code
                             98 ;--------------------------------------------------------
                             99 	.area _CODE
                            100 ;src/main.c:62: void myInterruptHandler(){
                            101 ;	---------------------------------
                            102 ; Function myInterruptHandler
                            103 ; ---------------------------------
   0000                     104 _myInterruptHandler::
                            105 ;src/main.c:66: i_time++;
   0000 FD 21r00r00   [14]  106 	ld	iy, #_i_time
   0004 FD 34 00      [23]  107 	inc	0 (iy)
   0007 20 0D         [12]  108 	jr	NZ,00154$
   0009 FD 34 01      [23]  109 	inc	1 (iy)
   000C 20 08         [12]  110 	jr	NZ,00154$
   000E FD 34 02      [23]  111 	inc	2 (iy)
   0011 20 03         [12]  112 	jr	NZ,00154$
   0013 FD 34 03      [23]  113 	inc	3 (iy)
   0016                     114 00154$:
                            115 ;src/main.c:67: g_nInterrupt++;
   0016 FD 21r50r00   [14]  116 	ld	iy, #_myInterruptHandler_g_nInterrupt_1_125
   001A FD 34 00      [23]  117 	inc	0 (iy)
                            118 ;src/main.c:68: switch (g_nInterrupt){
   001D FD 7E 00      [19]  119 	ld	a, 0 (iy)
   0020 3D            [ 4]  120 	dec	a
   0021 28 1E         [12]  121 	jr	Z,00101$
   0023 FD 7E 00      [19]  122 	ld	a, 0 (iy)
   0026 D6 02         [ 7]  123 	sub	a, #0x02
   0028 28 1F         [12]  124 	jr	Z,00102$
   002A FD 7E 00      [19]  125 	ld	a, 0 (iy)
   002D D6 03         [ 7]  126 	sub	a, #0x03
   002F 28 41         [12]  127 	jr	Z,00106$
   0031 FD 7E 00      [19]  128 	ld	a, 0 (iy)
   0034 D6 04         [ 7]  129 	sub	a, #0x04
   0036 28 42         [12]  130 	jr	Z,00107$
   0038 FD 7E 00      [19]  131 	ld	a, 0 (iy)
   003B D6 05         [ 7]  132 	sub	a, #0x05
   003D 28 43         [12]  133 	jr	Z,00108$
   003F 18 6A         [12]  134 	jr	00112$
                            135 ;src/main.c:69: case 1:
   0041                     136 00101$:
                            137 ;src/main.c:70: cpct_setBorder(HW_LIME);
   0041 21 10 1A      [10]  138 	ld	hl, #0x1a10
   0044 E5            [11]  139 	push	hl
   0045 CDr00r00      [17]  140 	call	_cpct_setPALColour
                            141 ;src/main.c:71: break;
   0048 C9            [10]  142 	ret
                            143 ;src/main.c:72: case 2:
   0049                     144 00102$:
                            145 ;src/main.c:73: cpct_setBorder(HW_BRIGHT_MAGENTA);
   0049 21 10 0D      [10]  146 	ld	hl, #0x0d10
   004C E5            [11]  147 	push	hl
   004D CDr00r00      [17]  148 	call	_cpct_setPALColour
                            149 ;src/main.c:75: while (i>0){
   0050 01 0E 01      [10]  150 	ld	bc, #0x010e
   0053                     151 00103$:
   0053 78            [ 4]  152 	ld	a, b
   0054 B1            [ 4]  153 	or	a,c
   0055 28 03         [12]  154 	jr	Z,00105$
                            155 ;src/main.c:76: i--;
   0057 0B            [ 6]  156 	dec	bc
   0058 18 F9         [12]  157 	jr	00103$
   005A                     158 00105$:
                            159 ;src/main.c:78: cpct_setBorder(HW_CYAN);
   005A 21 10 06      [10]  160 	ld	hl, #0x0610
   005D E5            [11]  161 	push	hl
   005E CDr00r00      [17]  162 	call	_cpct_setPALColour
                            163 ;src/main.c:79: cpct_setVideoMode(0);
   0061 2E 00         [ 7]  164 	ld	l, #0x00
   0063 CDr00r00      [17]  165 	call	_cpct_setVideoMode
                            166 ;src/main.c:80: cpct_setPalette(g_palette0, 16);
   0066 21 10 00      [10]  167 	ld	hl, #0x0010
   0069 E5            [11]  168 	push	hl
   006A 21r00r00      [10]  169 	ld	hl, #_g_palette0
   006D E5            [11]  170 	push	hl
   006E CDr00r00      [17]  171 	call	_cpct_setPalette
                            172 ;src/main.c:81: break;
   0071 C9            [10]  173 	ret
                            174 ;src/main.c:82: case 3:
   0072                     175 00106$:
                            176 ;src/main.c:83: cpct_setBorder(HW_RED);
   0072 21 10 1C      [10]  177 	ld	hl, #0x1c10
   0075 E5            [11]  178 	push	hl
   0076 CDr00r00      [17]  179 	call	_cpct_setPALColour
                            180 ;src/main.c:84: break;
   0079 C9            [10]  181 	ret
                            182 ;src/main.c:85: case 4:
   007A                     183 00107$:
                            184 ;src/main.c:86: cpct_setBorder(HW_YELLOW);
   007A 21 10 1E      [10]  185 	ld	hl, #0x1e10
   007D E5            [11]  186 	push	hl
   007E CDr00r00      [17]  187 	call	_cpct_setPALColour
                            188 ;src/main.c:87: break;
   0081 C9            [10]  189 	ret
                            190 ;src/main.c:88: case 5:
   0082                     191 00108$:
                            192 ;src/main.c:89: cpct_setBorder(HW_MAGENTA);
   0082 21 10 18      [10]  193 	ld	hl, #0x1810
   0085 E5            [11]  194 	push	hl
   0086 CDr00r00      [17]  195 	call	_cpct_setPALColour
                            196 ;src/main.c:91: while (i>0){
   0089 01 4A 01      [10]  197 	ld	bc, #0x014a
   008C                     198 00109$:
   008C 78            [ 4]  199 	ld	a, b
   008D B1            [ 4]  200 	or	a,c
   008E 28 03         [12]  201 	jr	Z,00111$
                            202 ;src/main.c:92: i--;
   0090 0B            [ 6]  203 	dec	bc
   0091 18 F9         [12]  204 	jr	00109$
   0093                     205 00111$:
                            206 ;src/main.c:94: cpct_setBorder(HW_BRIGHT_CYAN);
   0093 21 10 13      [10]  207 	ld	hl, #0x1310
   0096 E5            [11]  208 	push	hl
   0097 CDr00r00      [17]  209 	call	_cpct_setPALColour
                            210 ;src/main.c:95: cpct_setVideoMode(1);
   009A 2E 01         [ 7]  211 	ld	l, #0x01
   009C CDr00r00      [17]  212 	call	_cpct_setVideoMode
                            213 ;src/main.c:96: cpct_setPalette(g_palette1, 4);
   009F 21 04 00      [10]  214 	ld	hl, #0x0004
   00A2 E5            [11]  215 	push	hl
   00A3 21r00r00      [10]  216 	ld	hl, #_g_palette1
   00A6 E5            [11]  217 	push	hl
   00A7 CDr00r00      [17]  218 	call	_cpct_setPalette
                            219 ;src/main.c:97: break;
   00AA C9            [10]  220 	ret
                            221 ;src/main.c:98: default:
   00AB                     222 00112$:
                            223 ;src/main.c:99: cpct_setBorder(HW_BRIGHT_BLUE);
   00AB 21 10 15      [10]  224 	ld	hl, #0x1510
   00AE E5            [11]  225 	push	hl
   00AF CDr00r00      [17]  226 	call	_cpct_setPALColour
                            227 ;src/main.c:100: cpct_scanKeyboard();
   00B2 CDr00r00      [17]  228 	call	_cpct_scanKeyboard
                            229 ;src/main.c:101: g_nInterrupt = 0;
   00B5 21r50r00      [10]  230 	ld	hl,#_myInterruptHandler_g_nInterrupt_1_125 + 0
   00B8 36 00         [10]  231 	ld	(hl), #0x00
                            232 ;src/main.c:103: }
   00BA C9            [10]  233 	ret
   00BB                     234 _card_types:
   00BB 02                  235 	.db #0x02	; 2
   00BCr00r00               236 	.dw _s_cards_0
   00BE 53 57 4F 52 44 3A   237 	.ascii "SWORD:PRODUCES DIRECT DAMAGE TO THE ENEMY"
        50 52 4F 44 55 43
        45 53 20 44 49 52
        45 43 54 20 44 41
        4D 41 47 45 20 54
        4F 20 54 48 45 20
        45 4E 45 4D 59
   00E7 00                  238 	.db 0x00
   00E8 00                  239 	.db 0x00
   00E9 00                  240 	.db 0x00
   00EA 00                  241 	.db 0x00
   00EB 00                  242 	.db 0x00
   00EC 00                  243 	.db 0x00
   00ED 00                  244 	.db 0x00
   00EE 00                  245 	.db 0x00
   00EF 00                  246 	.db 0x00
   00F0 01                  247 	.db #0x01	; 1
   00F1r00r00               248 	.dw _s_cards_1
   00F3 53 48 49 45 4C 44   249 	.ascii "SHIELD:PROTECTS SOME DAMAGE"
        3A 50 52 4F 54 45
        43 54 53 20 53 4F
        4D 45 20 44 41 4D
        41 47 45
   010E 00                  250 	.db 0x00
   010F 00                  251 	.db 0x00
   0110 00                  252 	.db 0x00
   0111 00                  253 	.db 0x00
   0112 00                  254 	.db 0x00
   0113 00                  255 	.db 0x00
   0114 00                  256 	.db 0x00
   0115 00                  257 	.db 0x00
   0116 00                  258 	.db 0x00
   0117 00                  259 	.db 0x00
   0118 00                  260 	.db 0x00
   0119 00                  261 	.db 0x00
   011A 00                  262 	.db 0x00
   011B 00                  263 	.db 0x00
   011C 00                  264 	.db 0x00
   011D 00                  265 	.db 0x00
   011E 00                  266 	.db 0x00
   011F 00                  267 	.db 0x00
   0120 00                  268 	.db 0x00
   0121 00                  269 	.db 0x00
   0122 00                  270 	.db 0x00
   0123 00                  271 	.db 0x00
   0124 00                  272 	.db 0x00
   0125                     273 _card_sprite:
   0125r00r00               274 	.dw _s_cards_0
   0127r00r00               275 	.dw _s_cards_1
   0129                     276 _card_description:
   0129 53 57 4F 52 44 3A   277 	.ascii "SWORD:PRODUCES DIRECT DAMAGE TO THE ENEMY"
        50 52 4F 44 55 43
        45 53 20 44 49 52
        45 43 54 20 44 41
        4D 41 47 45 20 54
        4F 20 54 48 45 20
        45 4E 45 4D 59
   0152 00                  278 	.db 0x00
   0153 00                  279 	.db 0x00
   0154 00                  280 	.db 0x00
   0155 00                  281 	.db 0x00
   0156 00                  282 	.db 0x00
   0157 00                  283 	.db 0x00
   0158 00                  284 	.db 0x00
   0159 00                  285 	.db 0x00
   015A 00                  286 	.db 0x00
   015B 53 48 49 45 4C 44   287 	.ascii "SHIELD:PROTECTS SOME DAMAGE"
        3A 50 52 4F 54 45
        43 54 53 20 53 4F
        4D 45 20 44 41 4D
        41 47 45
   0176 00                  288 	.db 0x00
   0177 00                  289 	.db 0x00
   0178 00                  290 	.db 0x00
   0179 00                  291 	.db 0x00
   017A 00                  292 	.db 0x00
   017B 00                  293 	.db 0x00
   017C 00                  294 	.db 0x00
   017D 00                  295 	.db 0x00
   017E 00                  296 	.db 0x00
   017F 00                  297 	.db 0x00
   0180 00                  298 	.db 0x00
   0181 00                  299 	.db 0x00
   0182 00                  300 	.db 0x00
   0183 00                  301 	.db 0x00
   0184 00                  302 	.db 0x00
   0185 00                  303 	.db 0x00
   0186 00                  304 	.db 0x00
   0187 00                  305 	.db 0x00
   0188 00                  306 	.db 0x00
   0189 00                  307 	.db 0x00
   018A 00                  308 	.db 0x00
   018B 00                  309 	.db 0x00
   018C 00                  310 	.db 0x00
   018D                     311 _cost_sprite:
   018Dr00r00               312 	.dw _s_costs_0
   018Fr00r00               313 	.dw _s_costs_1
   0191r00r00               314 	.dw _s_costs_2
   0193r00r00               315 	.dw _s_costs_3
   0195r00r00               316 	.dw _s_costs_4
   0197r00r00               317 	.dw _s_costs_5
                            318 ;src/main.c:106: void initCPC() {
                            319 ;	---------------------------------
                            320 ; Function initCPC
                            321 ; ---------------------------------
   0199                     322 _initCPC::
                            323 ;src/main.c:111: cpct_setPalette(g_palette0, 16);
   0199 21 10 00      [10]  324 	ld	hl, #0x0010
   019C E5            [11]  325 	push	hl
   019D 21r00r00      [10]  326 	ld	hl, #_g_palette0
   01A0 E5            [11]  327 	push	hl
   01A1 CDr00r00      [17]  328 	call	_cpct_setPalette
                            329 ;src/main.c:112: cpct_setVideoMode(0);
   01A4 2E 00         [ 7]  330 	ld	l, #0x00
   01A6 CDr00r00      [17]  331 	call	_cpct_setVideoMode
                            332 ;src/main.c:113: cpct_memset((u8*)0x8000,0,0x8000);
   01A9 21 00 80      [10]  333 	ld	hl, #0x8000
   01AC E5            [11]  334 	push	hl
   01AD AF            [ 4]  335 	xor	a, a
   01AE F5            [11]  336 	push	af
   01AF 33            [ 6]  337 	inc	sp
   01B0 2E 00         [ 7]  338 	ld	l, #0x00
   01B2 E5            [11]  339 	push	hl
   01B3 CDr00r00      [17]  340 	call	_cpct_memset
                            341 ;src/main.c:118: cpct_setCRTCReg(12, 0x2c);
   01B6 21 0C 2C      [10]  342 	ld	hl, #0x2c0c
   01B9 E5            [11]  343 	push	hl
   01BA CDr00r00      [17]  344 	call	_cpct_setCRTCReg
                            345 ;src/main.c:122: cpct_waitVSYNC();
   01BD CDr00r00      [17]  346 	call	_cpct_waitVSYNC
                            347 ;src/main.c:123: cpct_waitHalts(2);
   01C0 2E 02         [ 7]  348 	ld	l, #0x02
   01C2 CDr00r00      [17]  349 	call	_cpct_waitHalts
                            350 ;src/main.c:124: cpct_waitVSYNC();
   01C5 CDr00r00      [17]  351 	call	_cpct_waitVSYNC
                            352 ;src/main.c:125: cpct_setInterruptHandler(myInterruptHandler);
   01C8 21r00r00      [10]  353 	ld	hl, #_myInterruptHandler
   01CB CDr00r00      [17]  354 	call	_cpct_setInterruptHandler
   01CE C9            [10]  355 	ret
                            356 ;src/main.c:128: void check_keyboard(){
                            357 ;	---------------------------------
                            358 ; Function check_keyboard
                            359 ; ---------------------------------
   01CF                     360 _check_keyboard::
                            361 ;src/main.c:129: if (cpct_isKeyPressed(Key_CursorLeft) && (selected_card>0)){
   01CF 21 01 01      [10]  362 	ld	hl, #0x0101
   01D2 CDr00r00      [17]  363 	call	_cpct_isKeyPressed
   01D5 7D            [ 4]  364 	ld	a, l
   01D6 B7            [ 4]  365 	or	a, a
   01D7 28 1A         [12]  366 	jr	Z,00105$
   01D9 FD 21r38r00   [14]  367 	ld	iy, #_selected_card
   01DD FD 7E 00      [19]  368 	ld	a, 0 (iy)
   01E0 B7            [ 4]  369 	or	a, a
   01E1 28 10         [12]  370 	jr	Z,00105$
                            371 ;src/main.c:130: previous_card = selected_card;
   01E3 FD 7E 00      [19]  372 	ld	a, 0 (iy)
   01E6 32r39r00      [13]  373 	ld	(#_previous_card + 0),a
                            374 ;src/main.c:131: selected_card--;
   01E9 21r38r00      [10]  375 	ld	hl, #_selected_card+0
   01EC 35            [11]  376 	dec	(hl)
                            377 ;src/main.c:132: moved = YES;
   01ED 21r4Fr00      [10]  378 	ld	hl,#_moved + 0
   01F0 36 01         [10]  379 	ld	(hl), #0x01
   01F2 C9            [10]  380 	ret
   01F3                     381 00105$:
                            382 ;src/main.c:133: } else if (cpct_isKeyPressed(Key_CursorRight) && (selected_card<num_cards-1)){
   01F3 21 00 02      [10]  383 	ld	hl, #0x0200
   01F6 CDr00r00      [17]  384 	call	_cpct_isKeyPressed
   01F9 7D            [ 4]  385 	ld	a, l
   01FA B7            [ 4]  386 	or	a, a
   01FB C8            [11]  387 	ret	Z
   01FC 21r4Er00      [10]  388 	ld	hl,#_num_cards + 0
   01FF 4E            [ 7]  389 	ld	c, (hl)
   0200 06 00         [ 7]  390 	ld	b, #0x00
   0202 0B            [ 6]  391 	dec	bc
   0203 3Ar38r00      [13]  392 	ld	a,(#_selected_card + 0)
   0206 16 00         [ 7]  393 	ld	d, #0x00
   0208 91            [ 4]  394 	sub	a, c
   0209 7A            [ 4]  395 	ld	a, d
   020A 98            [ 4]  396 	sbc	a, b
   020B E2r10r02      [10]  397 	jp	PO, 00126$
   020E EE 80         [ 7]  398 	xor	a, #0x80
   0210                     399 00126$:
   0210 F0            [11]  400 	ret	P
                            401 ;src/main.c:134: previous_card = selected_card;
   0211 3Ar38r00      [13]  402 	ld	a,(#_selected_card + 0)
   0214 32r39r00      [13]  403 	ld	(#_previous_card + 0),a
                            404 ;src/main.c:135: selected_card++;
   0217 21r38r00      [10]  405 	ld	hl, #_selected_card+0
   021A 34            [11]  406 	inc	(hl)
                            407 ;src/main.c:136: moved = YES;
   021B 21r4Fr00      [10]  408 	ld	hl,#_moved + 0
   021E 36 01         [10]  409 	ld	(hl), #0x01
   0220 C9            [10]  410 	ret
                            411 ;src/main.c:140: void draw_cards(){
                            412 ;	---------------------------------
                            413 ; Function draw_cards
                            414 ; ---------------------------------
   0221                     415 _draw_cards::
   0221 DD E5         [15]  416 	push	ix
   0223 DD 21 00 00   [14]  417 	ld	ix,#0
   0227 DD 39         [15]  418 	add	ix,sp
   0229 F5            [11]  419 	push	af
   022A F5            [11]  420 	push	af
                            421 ;src/main.c:145: cpct_waitVSYNC();
   022B CDr00r00      [17]  422 	call	_cpct_waitVSYNC
                            423 ;src/main.c:148: pvmem = cpct_getScreenPtr((u8*) VM_START, (previous_card*(S_CARDS_0_W-3))-2, 136);
   022E 3Ar39r00      [13]  424 	ld	a,(#_previous_card + 0)
   0231 4F            [ 4]  425 	ld	c, a
   0232 87            [ 4]  426 	add	a, a
   0233 87            [ 4]  427 	add	a, a
   0234 81            [ 4]  428 	add	a, c
   0235 47            [ 4]  429 	ld	b, a
   0236 05            [ 4]  430 	dec	b
   0237 05            [ 4]  431 	dec	b
   0238 3E 88         [ 7]  432 	ld	a, #0x88
   023A F5            [11]  433 	push	af
   023B 33            [ 6]  434 	inc	sp
   023C C5            [11]  435 	push	bc
   023D 33            [ 6]  436 	inc	sp
   023E 21 00 80      [10]  437 	ld	hl, #0x8000
   0241 E5            [11]  438 	push	hl
   0242 CDr00r00      [17]  439 	call	_cpct_getScreenPtr
   0245 22r04r00      [16]  440 	ld	(_pvmem), hl
                            441 ;src/main.c:149: cpct_drawSolidBox(pvmem, 0x33, S_CARDS_0_W+4, S_CARDS_0_H+4);  
   0248 2Ar04r00      [16]  442 	ld	hl, (_pvmem)
   024B 01 0C 2D      [10]  443 	ld	bc, #0x2d0c
   024E C5            [11]  444 	push	bc
   024F 01 33 00      [10]  445 	ld	bc, #0x0033
   0252 C5            [11]  446 	push	bc
   0253 E5            [11]  447 	push	hl
   0254 CDr00r00      [17]  448 	call	_cpct_drawSolidBox
                            449 ;src/main.c:152: for (i=0;i<selected_card;i++){
   0257 DD 36 FC 00   [19]  450 	ld	-4 (ix), #0x00
   025B                     451 00104$:
   025B 21r38r00      [10]  452 	ld	hl, #_selected_card
   025E DD 7E FC      [19]  453 	ld	a, -4 (ix)
   0261 96            [ 7]  454 	sub	a, (hl)
   0262 D2r07r03      [10]  455 	jp	NC, 00101$
                            456 ;src/main.c:153: pvmem = cpct_getScreenPtr((u8*) VM_START, 2+(i*(S_CARDS_0_W-3)), 140);
   0265 DD 7E FC      [19]  457 	ld	a, -4 (ix)
   0268 4F            [ 4]  458 	ld	c, a
   0269 87            [ 4]  459 	add	a, a
   026A 87            [ 4]  460 	add	a, a
   026B 81            [ 4]  461 	add	a, c
   026C DD 77 FD      [19]  462 	ld	-3 (ix), a
   026F 47            [ 4]  463 	ld	b, a
   0270 04            [ 4]  464 	inc	b
   0271 04            [ 4]  465 	inc	b
   0272 3E 8C         [ 7]  466 	ld	a, #0x8c
   0274 F5            [11]  467 	push	af
   0275 33            [ 6]  468 	inc	sp
   0276 C5            [11]  469 	push	bc
   0277 33            [ 6]  470 	inc	sp
   0278 21 00 80      [10]  471 	ld	hl, #0x8000
   027B E5            [11]  472 	push	hl
   027C CDr00r00      [17]  473 	call	_cpct_getScreenPtr
   027F 22r04r00      [16]  474 	ld	(_pvmem), hl
                            475 ;src/main.c:154: cpct_drawSprite(card_types[cards[i].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0282 2Ar04r00      [16]  476 	ld	hl, (_pvmem)
   0285 DD 75 FE      [19]  477 	ld	-2 (ix), l
   0288 DD 74 FF      [19]  478 	ld	-1 (ix), h
   028B DD 6E FC      [19]  479 	ld	l, -4 (ix)
   028E 26 00         [ 7]  480 	ld	h, #0x00
   0290 29            [11]  481 	add	hl, hl
   0291 01r3Ar00      [10]  482 	ld	bc,#_cards
   0294 09            [11]  483 	add	hl,bc
   0295 4D            [ 4]  484 	ld	c, l
   0296 44            [ 4]  485 	ld	b, h
   0297 0A            [ 7]  486 	ld	a, (bc)
   0298 5F            [ 4]  487 	ld	e,a
   0299 16 00         [ 7]  488 	ld	d,#0x00
   029B 6B            [ 4]  489 	ld	l, e
   029C 62            [ 4]  490 	ld	h, d
   029D 29            [11]  491 	add	hl, hl
   029E 19            [11]  492 	add	hl, de
   029F 29            [11]  493 	add	hl, hl
   02A0 29            [11]  494 	add	hl, hl
   02A1 19            [11]  495 	add	hl, de
   02A2 29            [11]  496 	add	hl, hl
   02A3 29            [11]  497 	add	hl, hl
   02A4 19            [11]  498 	add	hl, de
   02A5 11rBBr00      [10]  499 	ld	de, #_card_types
   02A8 19            [11]  500 	add	hl, de
   02A9 23            [ 6]  501 	inc	hl
   02AA 5E            [ 7]  502 	ld	e, (hl)
   02AB 23            [ 6]  503 	inc	hl
   02AC 56            [ 7]  504 	ld	d, (hl)
   02AD C5            [11]  505 	push	bc
   02AE 21 08 29      [10]  506 	ld	hl, #0x2908
   02B1 E5            [11]  507 	push	hl
   02B2 DD 6E FE      [19]  508 	ld	l,-2 (ix)
   02B5 DD 66 FF      [19]  509 	ld	h,-1 (ix)
   02B8 E5            [11]  510 	push	hl
   02B9 D5            [11]  511 	push	de
   02BA CDr00r00      [17]  512 	call	_cpct_drawSprite
   02BD C1            [10]  513 	pop	bc
                            514 ;src/main.c:155: pvmem = cpct_getScreenPtr((u8*) VM_START, 3+(i*(S_CARDS_0_W-3)), 141);
   02BE DD 56 FD      [19]  515 	ld	d, -3 (ix)
   02C1 14            [ 4]  516 	inc	d
   02C2 14            [ 4]  517 	inc	d
   02C3 14            [ 4]  518 	inc	d
   02C4 C5            [11]  519 	push	bc
   02C5 3E 8D         [ 7]  520 	ld	a, #0x8d
   02C7 F5            [11]  521 	push	af
   02C8 33            [ 6]  522 	inc	sp
   02C9 D5            [11]  523 	push	de
   02CA 33            [ 6]  524 	inc	sp
   02CB 21 00 80      [10]  525 	ld	hl, #0x8000
   02CE E5            [11]  526 	push	hl
   02CF CDr00r00      [17]  527 	call	_cpct_getScreenPtr
   02D2 C1            [10]  528 	pop	bc
   02D3 22r04r00      [16]  529 	ld	(_pvmem), hl
                            530 ;src/main.c:156: cpct_drawSprite(cost_sprite[card_types[cards[i].type].cost - 1], pvmem, S_COSTS_0_W, S_COSTS_0_H);
   02D6 ED 5Br04r00   [20]  531 	ld	de, (_pvmem)
   02DA 0A            [ 7]  532 	ld	a, (bc)
   02DB 4F            [ 4]  533 	ld	c,a
   02DC 06 00         [ 7]  534 	ld	b,#0x00
   02DE 69            [ 4]  535 	ld	l, c
   02DF 60            [ 4]  536 	ld	h, b
   02E0 29            [11]  537 	add	hl, hl
   02E1 09            [11]  538 	add	hl, bc
   02E2 29            [11]  539 	add	hl, hl
   02E3 29            [11]  540 	add	hl, hl
   02E4 09            [11]  541 	add	hl, bc
   02E5 29            [11]  542 	add	hl, hl
   02E6 29            [11]  543 	add	hl, hl
   02E7 09            [11]  544 	add	hl, bc
   02E8 01rBBr00      [10]  545 	ld	bc, #_card_types
   02EB 09            [11]  546 	add	hl, bc
   02EC 6E            [ 7]  547 	ld	l, (hl)
   02ED 2D            [ 4]  548 	dec	l
   02EE 26 00         [ 7]  549 	ld	h, #0x00
   02F0 29            [11]  550 	add	hl, hl
   02F1 01r8Dr01      [10]  551 	ld	bc, #_cost_sprite
   02F4 09            [11]  552 	add	hl, bc
   02F5 4E            [ 7]  553 	ld	c, (hl)
   02F6 23            [ 6]  554 	inc	hl
   02F7 46            [ 7]  555 	ld	b, (hl)
   02F8 21 02 06      [10]  556 	ld	hl, #0x0602
   02FB E5            [11]  557 	push	hl
   02FC D5            [11]  558 	push	de
   02FD C5            [11]  559 	push	bc
   02FE CDr00r00      [17]  560 	call	_cpct_drawSprite
                            561 ;src/main.c:152: for (i=0;i<selected_card;i++){
   0301 DD 34 FC      [23]  562 	inc	-4 (ix)
   0304 C3r5Br02      [10]  563 	jp	00104$
   0307                     564 00101$:
                            565 ;src/main.c:160: for (i=selected_card+1;i<num_cards;i++){
   0307 3Ar38r00      [13]  566 	ld	a,(#_selected_card + 0)
   030A 3C            [ 4]  567 	inc	a
   030B DD 77 FE      [19]  568 	ld	-2 (ix), a
   030E                     569 00107$:
   030E 21r4Er00      [10]  570 	ld	hl, #_num_cards
   0311 DD 7E FE      [19]  571 	ld	a, -2 (ix)
   0314 96            [ 7]  572 	sub	a, (hl)
   0315 D2rB2r03      [10]  573 	jp	NC, 00102$
                            574 ;src/main.c:161: pvmem = cpct_getScreenPtr((u8*) VM_START, 4+(i*(S_CARDS_0_W-3)), 140);
   0318 DD 7E FE      [19]  575 	ld	a, -2 (ix)
   031B 4F            [ 4]  576 	ld	c, a
   031C 87            [ 4]  577 	add	a, a
   031D 87            [ 4]  578 	add	a, a
   031E 81            [ 4]  579 	add	a, c
   031F DD 77 FD      [19]  580 	ld	-3 (ix), a
   0322 47            [ 4]  581 	ld	b, a
   0323 04            [ 4]  582 	inc	b
   0324 04            [ 4]  583 	inc	b
   0325 04            [ 4]  584 	inc	b
   0326 04            [ 4]  585 	inc	b
   0327 3E 8C         [ 7]  586 	ld	a, #0x8c
   0329 F5            [11]  587 	push	af
   032A 33            [ 6]  588 	inc	sp
   032B C5            [11]  589 	push	bc
   032C 33            [ 6]  590 	inc	sp
   032D 21 00 80      [10]  591 	ld	hl, #0x8000
   0330 E5            [11]  592 	push	hl
   0331 CDr00r00      [17]  593 	call	_cpct_getScreenPtr
   0334 22r04r00      [16]  594 	ld	(_pvmem), hl
                            595 ;src/main.c:162: cpct_drawSprite(card_types[cards[i].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0337 FD 2Ar04r00   [20]  596 	ld	iy, (_pvmem)
   033B DD 6E FE      [19]  597 	ld	l, -2 (ix)
   033E 26 00         [ 7]  598 	ld	h, #0x00
   0340 29            [11]  599 	add	hl, hl
   0341 01r3Ar00      [10]  600 	ld	bc,#_cards
   0344 09            [11]  601 	add	hl,bc
   0345 4D            [ 4]  602 	ld	c, l
   0346 44            [ 4]  603 	ld	b, h
   0347 0A            [ 7]  604 	ld	a, (bc)
   0348 5F            [ 4]  605 	ld	e,a
   0349 16 00         [ 7]  606 	ld	d,#0x00
   034B 6B            [ 4]  607 	ld	l, e
   034C 62            [ 4]  608 	ld	h, d
   034D 29            [11]  609 	add	hl, hl
   034E 19            [11]  610 	add	hl, de
   034F 29            [11]  611 	add	hl, hl
   0350 29            [11]  612 	add	hl, hl
   0351 19            [11]  613 	add	hl, de
   0352 29            [11]  614 	add	hl, hl
   0353 29            [11]  615 	add	hl, hl
   0354 19            [11]  616 	add	hl, de
   0355 11rBBr00      [10]  617 	ld	de, #_card_types
   0358 19            [11]  618 	add	hl, de
   0359 23            [ 6]  619 	inc	hl
   035A 5E            [ 7]  620 	ld	e, (hl)
   035B 23            [ 6]  621 	inc	hl
   035C 56            [ 7]  622 	ld	d, (hl)
   035D C5            [11]  623 	push	bc
   035E 21 08 29      [10]  624 	ld	hl, #0x2908
   0361 E5            [11]  625 	push	hl
   0362 FD E5         [15]  626 	push	iy
   0364 D5            [11]  627 	push	de
   0365 CDr00r00      [17]  628 	call	_cpct_drawSprite
   0368 C1            [10]  629 	pop	bc
                            630 ;src/main.c:163: pvmem = cpct_getScreenPtr((u8*) VM_START, 5+(i*(S_CARDS_0_W-3)), 141);
   0369 DD 7E FD      [19]  631 	ld	a, -3 (ix)
   036C C6 05         [ 7]  632 	add	a, #0x05
   036E 57            [ 4]  633 	ld	d, a
   036F C5            [11]  634 	push	bc
   0370 3E 8D         [ 7]  635 	ld	a, #0x8d
   0372 F5            [11]  636 	push	af
   0373 33            [ 6]  637 	inc	sp
   0374 D5            [11]  638 	push	de
   0375 33            [ 6]  639 	inc	sp
   0376 21 00 80      [10]  640 	ld	hl, #0x8000
   0379 E5            [11]  641 	push	hl
   037A CDr00r00      [17]  642 	call	_cpct_getScreenPtr
   037D C1            [10]  643 	pop	bc
   037E 22r04r00      [16]  644 	ld	(_pvmem), hl
                            645 ;src/main.c:164: cpct_drawSprite(cost_sprite[card_types[cards[i].type].cost - 1], pvmem, S_COSTS_0_W, S_COSTS_0_H);
   0381 ED 5Br04r00   [20]  646 	ld	de, (_pvmem)
   0385 0A            [ 7]  647 	ld	a, (bc)
   0386 4F            [ 4]  648 	ld	c,a
   0387 06 00         [ 7]  649 	ld	b,#0x00
   0389 69            [ 4]  650 	ld	l, c
   038A 60            [ 4]  651 	ld	h, b
   038B 29            [11]  652 	add	hl, hl
   038C 09            [11]  653 	add	hl, bc
   038D 29            [11]  654 	add	hl, hl
   038E 29            [11]  655 	add	hl, hl
   038F 09            [11]  656 	add	hl, bc
   0390 29            [11]  657 	add	hl, hl
   0391 29            [11]  658 	add	hl, hl
   0392 09            [11]  659 	add	hl, bc
   0393 01rBBr00      [10]  660 	ld	bc, #_card_types
   0396 09            [11]  661 	add	hl, bc
   0397 6E            [ 7]  662 	ld	l, (hl)
   0398 2D            [ 4]  663 	dec	l
   0399 26 00         [ 7]  664 	ld	h, #0x00
   039B 29            [11]  665 	add	hl, hl
   039C 01r8Dr01      [10]  666 	ld	bc, #_cost_sprite
   039F 09            [11]  667 	add	hl, bc
   03A0 4E            [ 7]  668 	ld	c, (hl)
   03A1 23            [ 6]  669 	inc	hl
   03A2 46            [ 7]  670 	ld	b, (hl)
   03A3 21 02 06      [10]  671 	ld	hl, #0x0602
   03A6 E5            [11]  672 	push	hl
   03A7 D5            [11]  673 	push	de
   03A8 C5            [11]  674 	push	bc
   03A9 CDr00r00      [17]  675 	call	_cpct_drawSprite
                            676 ;src/main.c:160: for (i=selected_card+1;i<num_cards;i++){
   03AC DD 34 FE      [23]  677 	inc	-2 (ix)
   03AF C3r0Er03      [10]  678 	jp	00107$
   03B2                     679 00102$:
                            680 ;src/main.c:168: pvmem = cpct_getScreenPtr((u8*) VM_START, 3+(selected_card*(S_CARDS_0_W-3)), 136);
   03B2 3Ar38r00      [13]  681 	ld	a,(#_selected_card + 0)
   03B5 4F            [ 4]  682 	ld	c, a
   03B6 87            [ 4]  683 	add	a, a
   03B7 87            [ 4]  684 	add	a, a
   03B8 81            [ 4]  685 	add	a, c
   03B9 47            [ 4]  686 	ld	b, a
   03BA 04            [ 4]  687 	inc	b
   03BB 04            [ 4]  688 	inc	b
   03BC 04            [ 4]  689 	inc	b
   03BD 3E 88         [ 7]  690 	ld	a, #0x88
   03BF F5            [11]  691 	push	af
   03C0 33            [ 6]  692 	inc	sp
   03C1 C5            [11]  693 	push	bc
   03C2 33            [ 6]  694 	inc	sp
   03C3 21 00 80      [10]  695 	ld	hl, #0x8000
   03C6 E5            [11]  696 	push	hl
   03C7 CDr00r00      [17]  697 	call	_cpct_getScreenPtr
   03CA 22r04r00      [16]  698 	ld	(_pvmem), hl
                            699 ;src/main.c:169: cpct_drawSprite(card_types[cards[selected_card].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   03CD ED 4Br04r00   [20]  700 	ld	bc, (_pvmem)
   03D1 FD 21r38r00   [14]  701 	ld	iy, #_selected_card
   03D5 FD 6E 00      [19]  702 	ld	l, 0 (iy)
   03D8 26 00         [ 7]  703 	ld	h, #0x00
   03DA 29            [11]  704 	add	hl, hl
   03DB 11r3Ar00      [10]  705 	ld	de, #_cards
   03DE 19            [11]  706 	add	hl, de
   03DF 5E            [ 7]  707 	ld	e, (hl)
   03E0 16 00         [ 7]  708 	ld	d,#0x00
   03E2 6B            [ 4]  709 	ld	l, e
   03E3 62            [ 4]  710 	ld	h, d
   03E4 29            [11]  711 	add	hl, hl
   03E5 19            [11]  712 	add	hl, de
   03E6 29            [11]  713 	add	hl, hl
   03E7 29            [11]  714 	add	hl, hl
   03E8 19            [11]  715 	add	hl, de
   03E9 29            [11]  716 	add	hl, hl
   03EA 29            [11]  717 	add	hl, hl
   03EB 19            [11]  718 	add	hl, de
   03EC 11rBBr00      [10]  719 	ld	de, #_card_types
   03EF 19            [11]  720 	add	hl, de
   03F0 23            [ 6]  721 	inc	hl
   03F1 5E            [ 7]  722 	ld	e, (hl)
   03F2 23            [ 6]  723 	inc	hl
   03F3 56            [ 7]  724 	ld	d, (hl)
   03F4 21 08 29      [10]  725 	ld	hl, #0x2908
   03F7 E5            [11]  726 	push	hl
   03F8 C5            [11]  727 	push	bc
   03F9 D5            [11]  728 	push	de
   03FA CDr00r00      [17]  729 	call	_cpct_drawSprite
                            730 ;src/main.c:170: pvmem = cpct_getScreenPtr((u8*) VM_START, 4+(selected_card*(S_CARDS_0_W-3)), 137);
   03FD 3Ar38r00      [13]  731 	ld	a,(#_selected_card + 0)
   0400 4F            [ 4]  732 	ld	c, a
   0401 87            [ 4]  733 	add	a, a
   0402 87            [ 4]  734 	add	a, a
   0403 81            [ 4]  735 	add	a, c
   0404 47            [ 4]  736 	ld	b, a
   0405 04            [ 4]  737 	inc	b
   0406 04            [ 4]  738 	inc	b
   0407 04            [ 4]  739 	inc	b
   0408 04            [ 4]  740 	inc	b
   0409 3E 89         [ 7]  741 	ld	a, #0x89
   040B F5            [11]  742 	push	af
   040C 33            [ 6]  743 	inc	sp
   040D C5            [11]  744 	push	bc
   040E 33            [ 6]  745 	inc	sp
   040F 21 00 80      [10]  746 	ld	hl, #0x8000
   0412 E5            [11]  747 	push	hl
   0413 CDr00r00      [17]  748 	call	_cpct_getScreenPtr
   0416 22r04r00      [16]  749 	ld	(_pvmem), hl
                            750 ;src/main.c:171: cpct_drawSprite(cost_sprite[card_types[cards[selected_card].type].cost - 1], pvmem, S_COSTS_0_W, S_COSTS_0_H);
   0419 ED 4Br04r00   [20]  751 	ld	bc, (_pvmem)
   041D FD 21r38r00   [14]  752 	ld	iy, #_selected_card
   0421 FD 6E 00      [19]  753 	ld	l, 0 (iy)
   0424 26 00         [ 7]  754 	ld	h, #0x00
   0426 29            [11]  755 	add	hl, hl
   0427 11r3Ar00      [10]  756 	ld	de, #_cards
   042A 19            [11]  757 	add	hl, de
   042B 5E            [ 7]  758 	ld	e, (hl)
   042C 16 00         [ 7]  759 	ld	d,#0x00
   042E 6B            [ 4]  760 	ld	l, e
   042F 62            [ 4]  761 	ld	h, d
   0430 29            [11]  762 	add	hl, hl
   0431 19            [11]  763 	add	hl, de
   0432 29            [11]  764 	add	hl, hl
   0433 29            [11]  765 	add	hl, hl
   0434 19            [11]  766 	add	hl, de
   0435 29            [11]  767 	add	hl, hl
   0436 29            [11]  768 	add	hl, hl
   0437 19            [11]  769 	add	hl, de
   0438 11rBBr00      [10]  770 	ld	de, #_card_types
   043B 19            [11]  771 	add	hl, de
   043C 6E            [ 7]  772 	ld	l, (hl)
   043D 2D            [ 4]  773 	dec	l
   043E 26 00         [ 7]  774 	ld	h, #0x00
   0440 29            [11]  775 	add	hl, hl
   0441 11r8Dr01      [10]  776 	ld	de, #_cost_sprite
   0444 19            [11]  777 	add	hl, de
   0445 5E            [ 7]  778 	ld	e, (hl)
   0446 23            [ 6]  779 	inc	hl
   0447 56            [ 7]  780 	ld	d, (hl)
   0448 21 02 06      [10]  781 	ld	hl, #0x0602
   044B E5            [11]  782 	push	hl
   044C C5            [11]  783 	push	bc
   044D D5            [11]  784 	push	de
   044E CDr00r00      [17]  785 	call	_cpct_drawSprite
                            786 ;src/main.c:175: pvmem = cpct_getScreenPtr((u8*) VM_START, 10, 190);
   0451 21 0A BE      [10]  787 	ld	hl, #0xbe0a
   0454 E5            [11]  788 	push	hl
   0455 21 00 80      [10]  789 	ld	hl, #0x8000
   0458 E5            [11]  790 	push	hl
   0459 CDr00r00      [17]  791 	call	_cpct_getScreenPtr
   045C 22r04r00      [16]  792 	ld	(_pvmem), hl
                            793 ;src/main.c:176: cpct_drawSolidBox(pvmem, 0x00, 50, 9);
   045F 2Ar04r00      [16]  794 	ld	hl, (_pvmem)
   0462 01 32 09      [10]  795 	ld	bc, #0x0932
   0465 C5            [11]  796 	push	bc
   0466 01 00 00      [10]  797 	ld	bc, #0x0000
   0469 C5            [11]  798 	push	bc
   046A E5            [11]  799 	push	hl
   046B CDr00r00      [17]  800 	call	_cpct_drawSolidBox
                            801 ;src/main.c:178: drawTextM1(card_types[cards[selected_card].type].description,2,190,NORMALHEIGHT);
   046E FD 21r38r00   [14]  802 	ld	iy, #_selected_card
   0472 FD 6E 00      [19]  803 	ld	l, 0 (iy)
   0475 26 00         [ 7]  804 	ld	h, #0x00
   0477 29            [11]  805 	add	hl, hl
   0478 11r3Ar00      [10]  806 	ld	de, #_cards
   047B 19            [11]  807 	add	hl, de
   047C 4E            [ 7]  808 	ld	c, (hl)
   047D 06 00         [ 7]  809 	ld	b,#0x00
   047F 69            [ 4]  810 	ld	l, c
   0480 60            [ 4]  811 	ld	h, b
   0481 29            [11]  812 	add	hl, hl
   0482 09            [11]  813 	add	hl, bc
   0483 29            [11]  814 	add	hl, hl
   0484 29            [11]  815 	add	hl, hl
   0485 09            [11]  816 	add	hl, bc
   0486 29            [11]  817 	add	hl, hl
   0487 29            [11]  818 	add	hl, hl
   0488 09            [11]  819 	add	hl, bc
   0489 11rBBr00      [10]  820 	ld	de, #_card_types
   048C 19            [11]  821 	add	hl, de
   048D 23            [ 6]  822 	inc	hl
   048E 23            [ 6]  823 	inc	hl
   048F 23            [ 6]  824 	inc	hl
   0490 4D            [ 4]  825 	ld	c, l
   0491 44            [ 4]  826 	ld	b, h
   0492 21 BE 01      [10]  827 	ld	hl, #0x01be
   0495 E5            [11]  828 	push	hl
   0496 3E 02         [ 7]  829 	ld	a, #0x02
   0498 F5            [11]  830 	push	af
   0499 33            [ 6]  831 	inc	sp
   049A C5            [11]  832 	push	bc
   049B CDr00r00      [17]  833 	call	_drawTextM1
   049E F1            [10]  834 	pop	af
   049F F1            [10]  835 	pop	af
   04A0 33            [ 6]  836 	inc	sp
                            837 ;src/main.c:181: sprintf(aux_txt, "PREVIOUS:%1d", previous_card);
   04A1 21r39r00      [10]  838 	ld	hl,#_previous_card + 0
   04A4 4E            [ 7]  839 	ld	c, (hl)
   04A5 06 00         [ 7]  840 	ld	b, #0x00
   04A7 C5            [11]  841 	push	bc
   04A8 21rF5r04      [10]  842 	ld	hl, #___str_2
   04AB E5            [11]  843 	push	hl
   04AC 21r06r00      [10]  844 	ld	hl, #_aux_txt
   04AF E5            [11]  845 	push	hl
   04B0 CDr00r00      [17]  846 	call	_sprintf
   04B3 21 06 00      [10]  847 	ld	hl, #6
   04B6 39            [11]  848 	add	hl, sp
   04B7 F9            [ 6]  849 	ld	sp, hl
                            850 ;src/main.c:182: drawTextM1(aux_txt,40,190,NORMALHEIGHT);
   04B8 21 BE 01      [10]  851 	ld	hl, #0x01be
   04BB E5            [11]  852 	push	hl
   04BC 3E 28         [ 7]  853 	ld	a, #0x28
   04BE F5            [11]  854 	push	af
   04BF 33            [ 6]  855 	inc	sp
   04C0 21r06r00      [10]  856 	ld	hl, #_aux_txt
   04C3 E5            [11]  857 	push	hl
   04C4 CDr00r00      [17]  858 	call	_drawTextM1
   04C7 F1            [10]  859 	pop	af
   04C8 F1            [10]  860 	pop	af
   04C9 33            [ 6]  861 	inc	sp
                            862 ;src/main.c:183: sprintf(aux_txt, "SELECTED:%1d", selected_card);
   04CA 21r38r00      [10]  863 	ld	hl,#_selected_card + 0
   04CD 4E            [ 7]  864 	ld	c, (hl)
   04CE 06 00         [ 7]  865 	ld	b, #0x00
   04D0 C5            [11]  866 	push	bc
   04D1 21r02r05      [10]  867 	ld	hl, #___str_3
   04D4 E5            [11]  868 	push	hl
   04D5 21r06r00      [10]  869 	ld	hl, #_aux_txt
   04D8 E5            [11]  870 	push	hl
   04D9 CDr00r00      [17]  871 	call	_sprintf
   04DC 21 06 00      [10]  872 	ld	hl, #6
   04DF 39            [11]  873 	add	hl, sp
   04E0 F9            [ 6]  874 	ld	sp, hl
                            875 ;src/main.c:184: drawTextM1(aux_txt,60,190,NORMALHEIGHT);
   04E1 21 BE 01      [10]  876 	ld	hl, #0x01be
   04E4 E5            [11]  877 	push	hl
   04E5 3E 3C         [ 7]  878 	ld	a, #0x3c
   04E7 F5            [11]  879 	push	af
   04E8 33            [ 6]  880 	inc	sp
   04E9 21r06r00      [10]  881 	ld	hl, #_aux_txt
   04EC E5            [11]  882 	push	hl
   04ED CDr00r00      [17]  883 	call	_drawTextM1
   04F0 DD F9         [10]  884 	ld	sp,ix
   04F2 DD E1         [14]  885 	pop	ix
   04F4 C9            [10]  886 	ret
   04F5                     887 ___str_2:
   04F5 50 52 45 56 49 4F   888 	.ascii "PREVIOUS:%1d"
        55 53 3A 25 31 64
   0501 00                  889 	.db 0x00
   0502                     890 ___str_3:
   0502 53 45 4C 45 43 54   891 	.ascii "SELECTED:%1d"
        45 44 3A 25 31 64
   050E 00                  892 	.db 0x00
                            893 ;src/main.c:188: void update_selected_card(){
                            894 ;	---------------------------------
                            895 ; Function update_selected_card
                            896 ; ---------------------------------
   050F                     897 _update_selected_card::
                            898 ;src/main.c:190: if (selected_card>0){
   050F 3Ar38r00      [13]  899 	ld	a,(#_selected_card + 0)
   0512 B7            [ 4]  900 	or	a, a
   0513 28 2A         [12]  901 	jr	Z,00102$
                            902 ;src/main.c:191: pvmem = cpct_getScreenPtr((u8*) VM_START, (previous_card*(S_CARDS_0_W))-2, 140);
   0515 3Ar39r00      [13]  903 	ld	a,(#_previous_card + 0)
   0518 07            [ 4]  904 	rlca
   0519 07            [ 4]  905 	rlca
   051A 07            [ 4]  906 	rlca
   051B E6 F8         [ 7]  907 	and	a, #0xf8
   051D 47            [ 4]  908 	ld	b, a
   051E 05            [ 4]  909 	dec	b
   051F 05            [ 4]  910 	dec	b
   0520 3E 8C         [ 7]  911 	ld	a, #0x8c
   0522 F5            [11]  912 	push	af
   0523 33            [ 6]  913 	inc	sp
   0524 C5            [11]  914 	push	bc
   0525 33            [ 6]  915 	inc	sp
   0526 21 00 80      [10]  916 	ld	hl, #0x8000
   0529 E5            [11]  917 	push	hl
   052A CDr00r00      [17]  918 	call	_cpct_getScreenPtr
   052D 22r04r00      [16]  919 	ld	(_pvmem), hl
                            920 ;src/main.c:192: cpct_drawSolidBox(pvmem, 0x33, S_CARDS_0_W, 5);
   0530 2Ar04r00      [16]  921 	ld	hl, (_pvmem)
   0533 01 08 05      [10]  922 	ld	bc, #0x0508
   0536 C5            [11]  923 	push	bc
   0537 01 33 00      [10]  924 	ld	bc, #0x0033
   053A C5            [11]  925 	push	bc
   053B E5            [11]  926 	push	hl
   053C CDr00r00      [17]  927 	call	_cpct_drawSolidBox
   053F                     928 00102$:
                            929 ;src/main.c:195: pvmem = cpct_getScreenPtr((u8*) VM_START, 2+(selected_card*(S_CARDS_0_W-3)), 144);
   053F 3Ar38r00      [13]  930 	ld	a,(#_selected_card + 0)
   0542 4F            [ 4]  931 	ld	c, a
   0543 87            [ 4]  932 	add	a, a
   0544 87            [ 4]  933 	add	a, a
   0545 81            [ 4]  934 	add	a, c
   0546 47            [ 4]  935 	ld	b, a
   0547 04            [ 4]  936 	inc	b
   0548 04            [ 4]  937 	inc	b
   0549 3E 90         [ 7]  938 	ld	a, #0x90
   054B F5            [11]  939 	push	af
   054C 33            [ 6]  940 	inc	sp
   054D C5            [11]  941 	push	bc
   054E 33            [ 6]  942 	inc	sp
   054F 21 00 80      [10]  943 	ld	hl, #0x8000
   0552 E5            [11]  944 	push	hl
   0553 CDr00r00      [17]  945 	call	_cpct_getScreenPtr
   0556 22r04r00      [16]  946 	ld	(_pvmem), hl
                            947 ;src/main.c:196: cpct_drawSprite(card_types[cards[selected_card].type].sprite, pvmem, S_CARDS_0_W, S_CARDS_0_H);
   0559 ED 5Br04r00   [20]  948 	ld	de, (_pvmem)
   055D 01r3Ar00      [10]  949 	ld	bc, #_cards+0
   0560 FD 21r38r00   [14]  950 	ld	iy, #_selected_card
   0564 FD 6E 00      [19]  951 	ld	l, 0 (iy)
   0567 26 00         [ 7]  952 	ld	h, #0x00
   0569 29            [11]  953 	add	hl, hl
   056A 09            [11]  954 	add	hl, bc
   056B 4E            [ 7]  955 	ld	c, (hl)
   056C 06 00         [ 7]  956 	ld	b,#0x00
   056E 69            [ 4]  957 	ld	l, c
   056F 60            [ 4]  958 	ld	h, b
   0570 29            [11]  959 	add	hl, hl
   0571 09            [11]  960 	add	hl, bc
   0572 29            [11]  961 	add	hl, hl
   0573 29            [11]  962 	add	hl, hl
   0574 09            [11]  963 	add	hl, bc
   0575 29            [11]  964 	add	hl, hl
   0576 29            [11]  965 	add	hl, hl
   0577 09            [11]  966 	add	hl, bc
   0578 01rBBr00      [10]  967 	ld	bc, #_card_types
   057B 09            [11]  968 	add	hl, bc
   057C 23            [ 6]  969 	inc	hl
   057D 4E            [ 7]  970 	ld	c, (hl)
   057E 23            [ 6]  971 	inc	hl
   057F 46            [ 7]  972 	ld	b, (hl)
   0580 21 08 29      [10]  973 	ld	hl, #0x2908
   0583 E5            [11]  974 	push	hl
   0584 D5            [11]  975 	push	de
   0585 C5            [11]  976 	push	bc
   0586 CDr00r00      [17]  977 	call	_cpct_drawSprite
   0589 C9            [10]  978 	ret
                            979 ;src/main.c:199: void init_cards(){
                            980 ;	---------------------------------
                            981 ; Function init_cards
                            982 ; ---------------------------------
   058A                     983 _init_cards::
                            984 ;src/main.c:202: num_cards = (cpct_rand() % 9) + 1;
   058A CDr00r00      [17]  985 	call	_cpct_getRandom_mxor_u8
   058D 45            [ 4]  986 	ld	b, l
   058E 3E 09         [ 7]  987 	ld	a, #0x09
   0590 F5            [11]  988 	push	af
   0591 33            [ 6]  989 	inc	sp
   0592 C5            [11]  990 	push	bc
   0593 33            [ 6]  991 	inc	sp
   0594 CDr00r00      [17]  992 	call	__moduchar
   0597 F1            [10]  993 	pop	af
   0598 7D            [ 4]  994 	ld	a, l
   0599 21r4Er00      [10]  995 	ld	hl, #_num_cards
   059C 3C            [ 4]  996 	inc	a
   059D 77            [ 7]  997 	ld	(hl), a
                            998 ;src/main.c:203: for (i=0;i<num_cards;i++){
   059E 0E 00         [ 7]  999 	ld	c, #0x00
   05A0                    1000 00103$:
   05A0 21r4Er00      [10] 1001 	ld	hl, #_num_cards
   05A3 79            [ 4] 1002 	ld	a, c
   05A4 96            [ 7] 1003 	sub	a, (hl)
   05A5 D2r21r02      [10] 1004 	jp	NC,_draw_cards
                           1005 ;src/main.c:204: cards[i].type = cpct_rand() % 2;
   05A8 69            [ 4] 1006 	ld	l, c
   05A9 26 00         [ 7] 1007 	ld	h, #0x00
   05AB 29            [11] 1008 	add	hl, hl
   05AC 11r3Ar00      [10] 1009 	ld	de, #_cards
   05AF 19            [11] 1010 	add	hl, de
   05B0 E5            [11] 1011 	push	hl
   05B1 C5            [11] 1012 	push	bc
   05B2 CDr00r00      [17] 1013 	call	_cpct_getRandom_mxor_u8
   05B5 7D            [ 4] 1014 	ld	a, l
   05B6 C1            [10] 1015 	pop	bc
   05B7 E1            [10] 1016 	pop	hl
   05B8 E6 01         [ 7] 1017 	and	a, #0x01
   05BA 77            [ 7] 1018 	ld	(hl), a
                           1019 ;src/main.c:203: for (i=0;i<num_cards;i++){
   05BB 0C            [ 4] 1020 	inc	c
   05BC 18 E2         [12] 1021 	jr	00103$
                           1022 ;src/main.c:207: draw_cards();
   05BE C3r21r02      [10] 1023 	jp  _draw_cards
                           1024 ;src/main.c:210: void main(void) {
                           1025 ;	---------------------------------
                           1026 ; Function main
                           1027 ; ---------------------------------
   05C1                    1028 _main::
                           1029 ;src/main.c:211: cpct_disableFirmware();
   05C1 CDr00r00      [17] 1030 	call	_cpct_disableFirmware
                           1031 ;src/main.c:212: cpct_setStackLocation((u8*) 0x7fff);
   05C4 21 FF 7F      [10] 1032 	ld	hl, #0x7fff
   05C7 CDr00r00      [17] 1033 	call	_cpct_setStackLocation
                           1034 ;src/main.c:214: initCPC();
   05CA CDr99r01      [17] 1035 	call	_initCPC
                           1036 ;src/main.c:216: selected_card = 4;
   05CD 21r38r00      [10] 1037 	ld	hl,#_selected_card + 0
   05D0 36 04         [10] 1038 	ld	(hl), #0x04
                           1039 ;src/main.c:217: previous_card = 4;
   05D2 21r39r00      [10] 1040 	ld	hl,#_previous_card + 0
   05D5 36 04         [10] 1041 	ld	(hl), #0x04
                           1042 ;src/main.c:218: moved = NO;
   05D7 21r4Fr00      [10] 1043 	ld	hl,#_moved + 0
   05DA 36 00         [10] 1044 	ld	(hl), #0x00
                           1045 ;src/main.c:220: drawTextM1("CARD HERO - DECK BUILDING GAME",10,0,NORMALHEIGHT);
   05DC 21 00 01      [10] 1046 	ld	hl, #0x0100
   05DF E5            [11] 1047 	push	hl
   05E0 3E 0A         [ 7] 1048 	ld	a, #0x0a
   05E2 F5            [11] 1049 	push	af
   05E3 33            [ 6] 1050 	inc	sp
   05E4 21r18r06      [10] 1051 	ld	hl, #___str_4
   05E7 E5            [11] 1052 	push	hl
   05E8 CDr00r00      [17] 1053 	call	_drawTextM1
   05EB F1            [10] 1054 	pop	af
                           1055 ;src/main.c:221: drawTextM1("SECOND LINE, JUST IN CASE",10,10,NORMALHEIGHT);
   05EC 33            [ 6] 1056 	inc	sp
   05ED 21 0A 01      [10] 1057 	ld	hl,#0x010a
   05F0 E3            [19] 1058 	ex	(sp),hl
   05F1 3E 0A         [ 7] 1059 	ld	a, #0x0a
   05F3 F5            [11] 1060 	push	af
   05F4 33            [ 6] 1061 	inc	sp
   05F5 21r37r06      [10] 1062 	ld	hl, #___str_5
   05F8 E5            [11] 1063 	push	hl
   05F9 CDr00r00      [17] 1064 	call	_drawTextM1
   05FC F1            [10] 1065 	pop	af
   05FD F1            [10] 1066 	pop	af
   05FE 33            [ 6] 1067 	inc	sp
                           1068 ;src/main.c:223: init_cards();
   05FF CDr8Ar05      [17] 1069 	call	_init_cards
                           1070 ;src/main.c:225: draw_cards();
   0602 CDr21r02      [17] 1071 	call	_draw_cards
                           1072 ;src/main.c:228: while (1){
   0605                    1073 00104$:
                           1074 ;src/main.c:229: check_keyboard();
   0605 CDrCFr01      [17] 1075 	call	_check_keyboard
                           1076 ;src/main.c:230: if (moved){
   0608 3Ar4Fr00      [13] 1077 	ld	a,(#_moved + 0)
   060B B7            [ 4] 1078 	or	a, a
   060C 28 F7         [12] 1079 	jr	Z,00104$
                           1080 ;src/main.c:231: draw_cards();
   060E CDr21r02      [17] 1081 	call	_draw_cards
                           1082 ;src/main.c:232: moved = NO;
   0611 21r4Fr00      [10] 1083 	ld	hl,#_moved + 0
   0614 36 00         [10] 1084 	ld	(hl), #0x00
   0616 18 ED         [12] 1085 	jr	00104$
   0618                    1086 ___str_4:
   0618 43 41 52 44 20 48  1087 	.ascii "CARD HERO - DECK BUILDING GAME"
        45 52 4F 20 2D 20
        44 45 43 4B 20 42
        55 49 4C 44 49 4E
        47 20 47 41 4D 45
   0636 00                 1088 	.db 0x00
   0637                    1089 ___str_5:
   0637 53 45 43 4F 4E 44  1090 	.ascii "SECOND LINE, JUST IN CASE"
        20 4C 49 4E 45 2C
        20 4A 55 53 54 20
        49 4E 20 43 41 53
        45
   0650 00                 1091 	.db 0x00
                           1092 	.area _CODE
                           1093 	.area _INITIALIZER
                           1094 	.area _CABS (ABS)
